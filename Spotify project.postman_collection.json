{
	"info": {
		"_postman_id": "b134869b-67f6-41d4-86e2-19e0fd215c9c",
		"name": "Spotify project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28988833"
	},
	"item": [
		{
			"name": "Positive testing",
			"item": [
				{
					"name": "1. Get Album -- no params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains album type\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"album_type\");\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains ID\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ID\");\r",
									"}\r",
									"\r",
									"pm.test(\"Reponse contains keys specified in API\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"market\");\r",
									"    pm.expect(pm.response.text()).to.include(\"release_date\");\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"total_tracks\");\r",
									"    pm.expect(pm.response.text()).to.include(\"available_markets\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQB7Xi0h8ch3zslPySWYRnYyvWOgRzY809hEWIqkccG1aQPrL0r0zAyEvnESL3o4h10nrFEHAkrkcKbfhdVGAn35VEONJuCLIJQS5VLdY7qwDgyXv-ZB7cKadSpZw7zsFDgOC5-NauvdyZ3StCRvwMszSxHCAVvZO29MdtSXr-Jv7-3JGq-KcDdXgHb4JzWeUjUxW2xz-SF8XT6qpXa1fRomjM_Afw7ay7jC8MocjZPCNIwK0seeCDR2Jw0hhlae8pV16F27V_odsfQI33zlhWUVU9BiJdg-NctBiqw0fgLYrxaHpPnIWK6Fw6EGgOaahxO8GXnODp0NlQ7FV3fN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/01u9MdrytYwPidRT0uoCXR",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"01u9MdrytYwPidRT0uoCXR"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Get Album -- market: valid value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains album type\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"album_type\");\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains ID\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ID\");\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains keys specified in API\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"tracks\");\r",
									"    pm.expect(pm.response.text()).to.include(\"images\");\r",
									"    pm.expect(pm.response.text()).to.include(\"href\");\r",
									"    pm.expect(pm.response.text()).to.include(\"artists\");\r",
									"    pm.expect(pm.response.text()).to.include(\"available_markets\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQB7Xi0h8ch3zslPySWYRnYyvWOgRzY809hEWIqkccG1aQPrL0r0zAyEvnESL3o4h10nrFEHAkrkcKbfhdVGAn35VEONJuCLIJQS5VLdY7qwDgyXv-ZB7cKadSpZw7zsFDgOC5-NauvdyZ3StCRvwMszSxHCAVvZO29MdtSXr-Jv7-3JGq-KcDdXgHb4JzWeUjUxW2xz-SF8XT6qpXa1fRomjM_Afw7ay7jC8MocjZPCNIwK0seeCDR2Jw0hhlae8pV16F27V_odsfQI33zlhWUVU9BiJdg-NctBiqw0fgLYrxaHpPnIWK6Fw6EGgOaahxO8GXnODp0NlQ7FV3fN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/7qNY7C7rkJwioya4lKLrJt?market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"7qNY7C7rkJwioya4lKLrJt"
							],
							"query": [
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get several albums -- valid nr (min) of albums (max. 20)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Check structure JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(pm.response.json()).to.have.property(\"albums\"); \r",
									"});\r",
									"\r",
									"pm.test(\"Check the response contains header\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"albums\"); \r",
									"});\r",
									"\r",
									"pm.test(\"Response contains album type\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"album_type\");\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains requested ids\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"4DZHSpFEwfDphP87KSH3jk\");\r",
									"    pm.expect(pm.response.text()).to.include(\"2DQhAbIgZG4QRy4mmQsFE0\");\r",
									"}\r",
									"\r",
									"pm.test(\"Reponse contains not requested ids\"), function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"478ajJKKosauiuiiu5454\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAbteK9CXUF0GIfITkW2XU2kDN4AYxXkO8fBbBdRPpyhBnAI-0784BBK7bGuSmgiWbK4-s_ZizhB5UfM_p2ud6iX1ytS2FMYHTLSFXumoXUJ8QLDgHvY-B1rvbm5bcKBEu530_1FxWmfCkvy02V37dHWoierbJgMyEGxe0DAW_-GnOOoqrhgOYVsRSq4-WZu16WVyhNOuOPqwxcW5DEDzBZcQ07ud1n0ju5yP8krtTxpCrcPLK-BY9TQg_u7R0GeLMiU1cSKl3CwbwgMq89vaWRqOrPhWdbuCE_ksW7QChTh2ctxHTDHIA8HpC3bmkjA0DXr5eM0TX8mFmFAkTj",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums?ids=2DQhAbIgZG4QRy4mmQsFE0,4DZHSpFEwfDphP87KSH3jk",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums"
							],
							"query": [
								{
									"key": "ids",
									"value": "2DQhAbIgZG4QRy4mmQsFE0,4DZHSpFEwfDphP87KSH3jk"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Get several albums -- valid nr (max) of albums (max. 20)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains part of requested ids\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1kTlYbs28MXw7hwO0NLYif\");\r",
									"    pm.expect(pm.response.text()).to.include(\"4DZHSpFEwfDphP87KSH3jk\");\r",
									"    pm.expect(pm.response.text()).to.include(\"2cWBwpqMsDJC1ZUwz813lo\");\r",
									"    pm.expect(pm.response.text()).to.include(\"0NZQTozgPtlt5iN3hmANhy\");\r",
									"    pm.expect(pm.response.text()).to.include(\"3nTMdaxlWKNs9TPL64pNDr\");\r",
									"}\r",
									"\r",
									"var data = pm.response.json()\r",
									"pm.test(\"First object received from request as expected\"), function () {\r",
									"    pm.expect(data.albums[0].album_type).to.eql(\"album\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"All albums returned \", function () {\r",
									"    pm.expect(data.albums.length).to.eql(20);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAaZBc1J2Li2tuylXg0DenuZNVqXQKrqwvx4jl1B1oVmKoMiQeQROBzRLXXFLGXXYj2pKExdz2Bw6P48TnY6oGRcYb48F4ljSMCZPcxwIvI7F6iXGoM730fESub3JHoWQaQt6lbdI70acHe-UrR2zMpfrpq8tLdwepln85dqLn9SYN6GYn2PijnaW6H5JcmpAs7dOT1LEe241QptDp0PW40yqGRcXMSQAPywjszrS2Zu-q0KEQyjvXQZqNQA_EMqZ3CcWo-x6Y2yuhgZ7SmNAvEsCbPLDSAonTpSWe-5IonlFd_bOb7VrRuWg6xZGHEQJcHTdNBe-ZC6mIAonNu",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums?ids=K7m1TRRzyfQ3dav2JVgdj,3aTuW4BtsyyyyQa9LKqj8n,0NZQTozgPtlt5iN3hmANhy,5lf8VH2121Ngg7AD3Ps8Ch,0bhYU6Jz7XaXw9x67pSWTc,01u9MdrytYwPidRT0uoCXR,1cIdztckCGQOeGrou4xOG4,4JTFvbBdQuXIafNDMuezO0,679ytQ4HN7FspEGibjecXj,1t3Z2hSfT1fm5iHHWC65xd,128oy4BxWb3Tk4jsdwRdBq,3HNnxK7NgLXbDoxRZxNWiR,7MZzYkbHL9Tk3O6WeD4Z0Z,4otkd9As6YaxxEkIjXPiZ6,2DQhAbIgZG4QRy4mmQsFE0,47BiFcV59TQi2s9SkBo2pb,1kTlYbs28MXw7hwO0NLYif,2cWBwpqMsDJC1ZUwz813lo,4DZHSpFEwfDphP87KSH3jk,3nTMdaxlWKNs9TPL64pNDr",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums"
							],
							"query": [
								{
									"key": "ids",
									"value": "K7m1TRRzyfQ3dav2JVgdj,3aTuW4BtsyyyyQa9LKqj8n,0NZQTozgPtlt5iN3hmANhy,5lf8VH2121Ngg7AD3Ps8Ch,0bhYU6Jz7XaXw9x67pSWTc,01u9MdrytYwPidRT0uoCXR,1cIdztckCGQOeGrou4xOG4,4JTFvbBdQuXIafNDMuezO0,679ytQ4HN7FspEGibjecXj,1t3Z2hSfT1fm5iHHWC65xd,128oy4BxWb3Tk4jsdwRdBq,3HNnxK7NgLXbDoxRZxNWiR,7MZzYkbHL9Tk3O6WeD4Z0Z,4otkd9As6YaxxEkIjXPiZ6,2DQhAbIgZG4QRy4mmQsFE0,47BiFcV59TQi2s9SkBo2pb,1kTlYbs28MXw7hwO0NLYif,2cWBwpqMsDJC1ZUwz813lo,4DZHSpFEwfDphP87KSH3jk,3nTMdaxlWKNs9TPL64pNDr"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Get albums tracks -- valid limit-1 (0-50 range)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"var data = pm.response.json()\r",
									"pm.test(\"Album tracks contains artist id 4RAbHb0oHO62If4S7h18L0 \", function () {\r",
									"    pm.expect(data.items[0].artists[0].id).to.eql(\"4RAbHb0oHO62If4S7h18L0\");\r",
									"});\r",
									"\r",
									"var data = pm.response.json()\r",
									"pm.test(\"Album tracks contains artist with named Magic Touch \", function () {\r",
									"    pm.expect(data.items[0].artists[1].name).to.eql(\"Magic Touch\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Limit parameter as requested\", function () {\r",
									"    pm.expect(data.limit).to.eql(1);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCPV2ZOcc3aPg92cB2WroKkwcKquH0I0Gir-NwkukTa-VLVUN1mMTSzSs3QKrnmmG6epiaavwmVv9shqwV5uvKbGfYOvZrdpy9FVGY8riJG1eiShXE0jUzq3RaklAiXiBbA19AhnoCRtpya13KKxq-V-yid_TvOp-UbZl8P1PYxDZZwweTJCQfiVrCYWp_Yy_5FMFGj6qSx6bUktlcwbROJt0SmZ123kEbFjz9cMv0ikWjj6itI7eBcIQ3we55Ifmc9IXUu8BAnC952vmuexA_9f0AjfMkW5sWB7MNn3d1y2ili4_D4VDN_9Lxtddw3KbPMI6oPvv1ZfKZ6mORm",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/2DQhAbIgZG4QRy4mmQsFE0/tracks?limit=1",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"2DQhAbIgZG4QRy4mmQsFE0",
								"tracks"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Get albums tracks -- valid limit-4 (0-50 range)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"var data = pm.response.json()\r",
									"pm.test(\"Response with limit parameter as requested \", function () {\r",
									"    pm.expect(data.limit).to.eql(4)\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains part of parameters specified in API\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"href\");\r",
									"    pm.expect(pm.response.text()).to.include(\"next\");\r",
									"    pm.expect(pm.response.text()).to.include(\"offset\");\r",
									"    pm.expect(pm.response.text()).to.include(\"previous\");\r",
									"    pm.expect(pm.response.text()).to.include(\"items\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCtdIHITLCrm-SMaQFdwKEampC-G1HJY5mvRpLcCgAlGeMst9yAYdlPbqvb1W6OqP2WDFpQm_oVjujAJqjhNY5Hrq1XdnfrobI7Gu0GZMsNK1NekJK9Dui7L_w-vUivm2MRq5v1MhsnMDut544rdlFgEucoz3zibHR6AisQ4W-tfUkb7TRJwvg4-ImyVsURgrt4D0R_DL_4L1wY9rrxLzu3_MW0xkw0YcWK1Z6L-zPhyrPPr4Y2yPzQqIMtjfuutLAY2qGQS_zeOwW3ceQ8ZE0lJSDslXtDHKcTR4ZauenOYkRvVztrNSznxgac3s-_5jktUJPZBBDv0XJNWYQN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/2zIFsf5FefGkMPWS9fqg42/tracks?limit=4",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"2zIFsf5FefGkMPWS9fqg42",
								"tracks"
							],
							"query": [
								{
									"key": "limit",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Get albums tracks -- valid offset-3 (0-default)Limit1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"var data = pm.response.json()\r",
									"pm.test(\"Response with limit parameter as requested \", function () {\r",
									"    pm.expect(data.limit).to.eql(1)\r",
									"});\r",
									"\r",
									"pm.test(\"Response with offset parameter as requested \", function () {\r",
									"    pm.expect(data.offset).to.eql(3);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCPV2ZOcc3aPg92cB2WroKkwcKquH0I0Gir-NwkukTa-VLVUN1mMTSzSs3QKrnmmG6epiaavwmVv9shqwV5uvKbGfYOvZrdpy9FVGY8riJG1eiShXE0jUzq3RaklAiXiBbA19AhnoCRtpya13KKxq-V-yid_TvOp-UbZl8P1PYxDZZwweTJCQfiVrCYWp_Yy_5FMFGj6qSx6bUktlcwbROJt0SmZ123kEbFjz9cMv0ikWjj6itI7eBcIQ3we55Ifmc9IXUu8BAnC952vmuexA_9f0AjfMkW5sWB7MNn3d1y2ili4_D4VDN_9Lxtddw3KbPMI6oPvv1ZfKZ6mORm",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/1t3Z2hSfT1fm5iHHWC65xd/tracks?offset=3&limit=1",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"1t3Z2hSfT1fm5iHHWC65xd",
								"tracks"
							],
							"query": [
								{
									"key": "offset",
									"value": "3"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Get albums tracks -- valid market, valid offset, valid limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"var data = pm.response.json()\r",
									"pm.test(\"Response with limit parameter as requested \", function () {\r",
									"    pm.expect(data.limit).to.eql(2)\r",
									"});\r",
									"\r",
									"pm.test(\"Response with offset parameter as requested \", function () {\r",
									"    pm.expect(data.offset).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains part of parameters specified in API\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"RO\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains album id 2DQhAbIgZG4QRy4mmQsFE0 \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"2DQhAbIgZG4QRy4mmQsFE0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCtdIHITLCrm-SMaQFdwKEampC-G1HJY5mvRpLcCgAlGeMst9yAYdlPbqvb1W6OqP2WDFpQm_oVjujAJqjhNY5Hrq1XdnfrobI7Gu0GZMsNK1NekJK9Dui7L_w-vUivm2MRq5v1MhsnMDut544rdlFgEucoz3zibHR6AisQ4W-tfUkb7TRJwvg4-ImyVsURgrt4D0R_DL_4L1wY9rrxLzu3_MW0xkw0YcWK1Z6L-zPhyrPPr4Y2yPzQqIMtjfuutLAY2qGQS_zeOwW3ceQ8ZE0lJSDslXtDHKcTR4ZauenOYkRvVztrNSznxgac3s-_5jktUJPZBBDv0XJNWYQN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/2DQhAbIgZG4QRy4mmQsFE0/tracks?market=RO&offset=2&limit=2",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"2DQhAbIgZG4QRy4mmQsFE0",
								"tracks"
							],
							"query": [
								{
									"key": "market",
									"value": "RO"
								},
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Get Users Saved Albums -- valid album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains album id 7qNY7C7rkJwioya4lKLrJt \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"7qNY7C7rkJwioya4lKLrJt\");\r",
									"});\r",
									"\r",
									"var data = pm.response.json()\r",
									"pm.test(\"Response with limit parameter as requested \", function () {\r",
									"    pm.expect(data.limit).to.eql(2)\r",
									"});\r",
									"\r",
									"pm.test(\"Response with offset parameter as requested \", function () {\r",
									"    pm.expect(data.offset).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Attribute 'album_type' in body of requested album \", function() {\r",
									"    pm.expect(data.items[0].album.album_type).to.eql(\"album\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCfFKS6zQNqgfnOeQKx4WAY9MotWfBc0_N2nIG1hDqGiLtxs0ytgUqmWrdAdh9LEdonRGx1RZLpeZ_7AoDGEAR2Eh8PJK-lUD7Ybqq8vf4tIugHIc0IFYwPuZPO7gYdsdFqOOFa29GkA1n0eQkZ-UiqIdXCGfoPjIoa4Sr0UCUesCZIgAk7St0DlHyS8P__fWZ-giDxvUZ9-t-eB2j087i8gnKlcrwh6vG93BKh2HXF_K56dSOAAXsM2bIb97dJO6AhE46Pp0CdrsMuLhdLkh9wPcRQl3qG_bmJJo2lwbUFZ9lBUHS0ofRSWOIJiS26HpsTSNRxqZhR1Gs5Pj_j",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums?limit=2&offset=0",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Save Album -- valid album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Testare metoda HTTP - Put\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"Empty body as specified\", function () {\r",
									"    pm.expect(pm.response.text()).to.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'error' is in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCfFKS6zQNqgfnOeQKx4WAY9MotWfBc0_N2nIG1hDqGiLtxs0ytgUqmWrdAdh9LEdonRGx1RZLpeZ_7AoDGEAR2Eh8PJK-lUD7Ybqq8vf4tIugHIc0IFYwPuZPO7gYdsdFqOOFa29GkA1n0eQkZ-UiqIdXCGfoPjIoa4Sr0UCUesCZIgAk7St0DlHyS8P__fWZ-giDxvUZ9-t-eB2j087i8gnKlcrwh6vG93BKh2HXF_K56dSOAAXsM2bIb97dJO6AhE46Pp0CdrsMuLhdLkh9wPcRQl3qG_bmJJo2lwbUFZ9lBUHS0ofRSWOIJiS26HpsTSNRxqZhR1Gs5Pj_j",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"7qNY7C7rkJwioya4lKLrJt\",\r\n        \"01u9MdrytYwPidRT0uoCXR\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "11. Delete Album -- valid album to delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking of HTTP method - Del\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'error' shows up in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Empty body as specified\", function () {\r",
									"    pm.expect(pm.response.text()).to.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if header is in response\", function () {\r",
									"    pm.response.to.have.header;\r",
									"});\r",
									"\r",
									"pm.test(\"Check header is correct\",function(){\r",
									"    pm.response.to.have.header(\"x-robots-tag\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAaZBc1J2Li2tuylXg0DenuZNVqXQKrqwvx4jl1B1oVmKoMiQeQROBzRLXXFLGXXYj2pKExdz2Bw6P48TnY6oGRcYb48F4ljSMCZPcxwIvI7F6iXGoM730fESub3JHoWQaQt6lbdI70acHe-UrR2zMpfrpq8tLdwepln85dqLn9SYN6GYn2PijnaW6H5JcmpAs7dOT1LEe241QptDp0PW40yqGRcXMSQAPywjszrS2Zu-q0KEQyjvXQZqNQA_EMqZ3CcWo-x6Y2yuhgZ7SmNAvEsCbPLDSAonTpSWe-5IonlFd_bOb7VrRuWg6xZGHEQJcHTdNBe-ZC6mIAonNu",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"01u9MdrytYwPidRT0uoCXR\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "12. Get Check Album -- valid album for checking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response body contains 'true'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"true\");\r",
									"});\r",
									"\r",
									"pm.test(\"Checking of HTTP method - Get\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'error' shows up in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if header is in response\", function () {\r",
									"    pm.response.to.have.header;\r",
									"});\r",
									"\r",
									"pm.test(\"Check length of body response\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Reponse contains 'true'\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"true\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCfFKS6zQNqgfnOeQKx4WAY9MotWfBc0_N2nIG1hDqGiLtxs0ytgUqmWrdAdh9LEdonRGx1RZLpeZ_7AoDGEAR2Eh8PJK-lUD7Ybqq8vf4tIugHIc0IFYwPuZPO7gYdsdFqOOFa29GkA1n0eQkZ-UiqIdXCGfoPjIoa4Sr0UCUesCZIgAk7St0DlHyS8P__fWZ-giDxvUZ9-t-eB2j087i8gnKlcrwh6vG93BKh2HXF_K56dSOAAXsM2bIb97dJO6AhE46Pp0CdrsMuLhdLkh9wPcRQl3qG_bmJJo2lwbUFZ9lBUHS0ofRSWOIJiS26HpsTSNRxqZhR1Gs5Pj_j",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums/contains?ids=7qNY7C7rkJwioya4lKLrJt",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "7qNY7C7rkJwioya4lKLrJt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "13. Get New Releases -- valid limit/offset/country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'error' shows up in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if header is in response\", function () {\r",
									"    pm.response.to.have.header;\r",
									"});\r",
									"\r",
									"pm.test(\"Checking of HTTP method - Get\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains part of parameters specified in API\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"limit\");\r",
									"    pm.expect(pm.response.text()).to.include(\"href\");\r",
									"    pm.expect(pm.response.text()).to.include(\"next\");\r",
									"    pm.expect(pm.response.text()).to.include(\"offset\");\r",
									"});\r",
									"var data = pm.response.json()\r",
									"pm.test(\"Response with offset parameter as requested \", function () {\r",
									"    pm.expect(data.albums.offset).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Response with limit parameter as requested \", function () {\r",
									"    pm.expect(data.albums.limit).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Response with country parameter as requested \", function () {\r",
									"    pm.expect(data.albums.items[0].available_markets).to.include(\"RO\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCfFKS6zQNqgfnOeQKx4WAY9MotWfBc0_N2nIG1hDqGiLtxs0ytgUqmWrdAdh9LEdonRGx1RZLpeZ_7AoDGEAR2Eh8PJK-lUD7Ybqq8vf4tIugHIc0IFYwPuZPO7gYdsdFqOOFa29GkA1n0eQkZ-UiqIdXCGfoPjIoa4Sr0UCUesCZIgAk7St0DlHyS8P__fWZ-giDxvUZ9-t-eB2j087i8gnKlcrwh6vG93BKh2HXF_K56dSOAAXsM2bIb97dJO6AhE46Pp0CdrsMuLhdLkh9wPcRQl3qG_bmJJo2lwbUFZ9lBUHS0ofRSWOIJiS26HpsTSNRxqZhR1Gs5Pj_j",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/new-releases?limit=2&offset=2&country=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"new-releases"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "country",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "14. Get Artist -- valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'error' shows up in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if header is in response\", function () {\r",
									"    pm.response.to.have.header;\r",
									"});\r",
									"\r",
									"pm.test(\"Checking of HTTP method - Get\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"GET\");\r",
									"});\r",
									"\r",
									"var data = pm.response.json()\r",
									"pm.test(\"Check the name of artist requested\", function () {\r",
									"    pm.expect(data.name).to.eql(\"Queen Omega\")\r",
									"})\r",
									"\r",
									"pm.test(\"Check the type of artist requested\", function () {\r",
									"    pm.expect(data.type).to.eql(\"artist\")\r",
									"})\r",
									"\r",
									"pm.test(\"Check the id of artist requested\", function () {\r",
									"    pm.expect(data.id).to.eql(\"0NZQTozgPtlt5iN3hmANhy\")\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCfFKS6zQNqgfnOeQKx4WAY9MotWfBc0_N2nIG1hDqGiLtxs0ytgUqmWrdAdh9LEdonRGx1RZLpeZ_7AoDGEAR2Eh8PJK-lUD7Ybqq8vf4tIugHIc0IFYwPuZPO7gYdsdFqOOFa29GkA1n0eQkZ-UiqIdXCGfoPjIoa4Sr0UCUesCZIgAk7St0DlHyS8P__fWZ-giDxvUZ9-t-eB2j087i8gnKlcrwh6vG93BKh2HXF_K56dSOAAXsM2bIb97dJO6AhE46Pp0CdrsMuLhdLkh9wPcRQl3qG_bmJJo2lwbUFZ9lBUHS0ofRSWOIJiS26HpsTSNRxqZhR1Gs5Pj_j",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists/0NZQTozgPtlt5iN3hmANhy",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"0NZQTozgPtlt5iN3hmANhy"
							]
						}
					},
					"response": []
				},
				{
					"name": "15. Get Several Artists -- valid ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"var data = pm.response.json()\r",
									"pm.test(\"Check the types of artists requested\", function () {\r",
									"    pm.expect(data.artists[0].type).to.contain(\"artist\");\r",
									"    pm.expect(data.artists[1].type).to.contain(\"artist\");\r",
									"})\r",
									"\r",
									"pm.test(\"Check the names of artists requested\", function () {\r",
									"    pm.expect(data.artists[0].name).to.contain(\"Queen Omega\");\r",
									"    pm.expect(data.artists[1].name).to.contain(\"Uzzi\");\r",
									"})\r",
									"\r",
									"pm.test(\"Check the ids of artists requested\", function () {\r",
									"    pm.expect(data.artists[0].id).to.eql(\"0NZQTozgPtlt5iN3hmANhy\")\r",
									"    pm.expect(data.artists[1].id).to.eql(\"1u7VoUsRoA8TwydQXPLseH\")\r",
									"})\r",
									"\r",
									"pm.test(\"Empty body as specified\", function () {\r",
									"    pm.expect(data.artists).to.have.lengthOf(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if header is in response\", function () {\r",
									"    pm.response.to.have.header;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCfFKS6zQNqgfnOeQKx4WAY9MotWfBc0_N2nIG1hDqGiLtxs0ytgUqmWrdAdh9LEdonRGx1RZLpeZ_7AoDGEAR2Eh8PJK-lUD7Ybqq8vf4tIugHIc0IFYwPuZPO7gYdsdFqOOFa29GkA1n0eQkZ-UiqIdXCGfoPjIoa4Sr0UCUesCZIgAk7St0DlHyS8P__fWZ-giDxvUZ9-t-eB2j087i8gnKlcrwh6vG93BKh2HXF_K56dSOAAXsM2bIb97dJO6AhE46Pp0CdrsMuLhdLkh9wPcRQl3qG_bmJJo2lwbUFZ9lBUHS0ofRSWOIJiS26HpsTSNRxqZhR1Gs5Pj_j",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists?ids=0NZQTozgPtlt5iN3hmANhy,1u7VoUsRoA8TwydQXPLseH",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists"
							],
							"query": [
								{
									"key": "ids",
									"value": "0NZQTozgPtlt5iN3hmANhy,1u7VoUsRoA8TwydQXPLseH"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "16. Get Artists TopTracks-- valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"var data = pm.response.json()\r",
									"pm.test(\"Response contains part of parameters specified in API\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"tracks\");\r",
									"    pm.expect(pm.response.text()).to.include(\"album\");\r",
									"    pm.expect(pm.response.text()).to.include(\"artists\");\r",
									"    pm.expect(pm.response.text()).to.include(\"disc_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"duration_ms\");\r",
									"    pm.expect(pm.response.text()).to.include(\"external_ids\");\r",
									"    pm.expect(pm.response.text()).to.include(\"external_urls\");\r",
									"    pm.expect(pm.response.text()).to.include(\"href\");\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"is_playable\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"popularity\");\r",
									"    pm.expect(pm.response.text()).to.include(\"preview_url\");\r",
									"    pm.expect(pm.response.text()).to.include(\"track_number\");\r",
									"    pm.expect(pm.response.text()).to.include(\"is_local\");\r",
									"    pm.expect(pm.response.text()).to.include(\"uri\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains part of parameters specified in API\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"restrictions\");\r",
									"    pm.expect(pm.response.text()).to.not.include(\"linked_from\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Check if 'error' shows up in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Checking of HTTP method - Get\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check length of body response\", function () {\r",
									"    pm.expect(data.tracks).to.have.lengthOf(10);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQD2EiPOo5OZOnnNSHS-QqxrOBxa2wORE807SO0uOV7U3-6AS8DsMIgvJj86msU-Y6PwbVUco0OhyO5TTUkMHkQ-eWTr_pbM-gJrofP2S-XLBR0QrmXVjfp_lxv0njtmBho4emEfFAVXUR7g4kEVmTmo2lcOZKMbUwCLFgiW-tQczi7pNGNWi3pf1pfpqs4AUWDD4Hhm85WlFYlqrNsB73CP3fPvEYIfzLWs4b_WxD9htrA3A8YCOM7Ta4_N4QCu0BWyvNJcR3MpEWmwV3oNstmvg0zy-qpcUjOlyykJBhDKgqwPEli1IduUNPlVi0-IhZKQ1N2LzIqSOSFwzc65",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists/2w9zwq3AktTeYYMuhMjju8/top-tracks?country=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"2w9zwq3AktTeYYMuhMjju8",
								"top-tracks"
							],
							"query": [
								{
									"key": "country",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "17. Get Artists related artists-- valid artist id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'error' shows up in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Checking of HTTP method - Get\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains artist id of an artists related\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"0MBEd6qd0GmDdDW8Pyftuv\");\r",
									"});\r",
									"\r",
									"var data = pm.response.json()\r",
									"pm.test(\"Check the type of received artist as requested\", function () {\r",
									"    pm.expect(data.artists[0].type).to.eql(\"artist\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response contains part of parameters specified in API\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"followers\");\r",
									"    pm.expect(pm.response.text()).to.include(\"genres\");\r",
									"    pm.expect(pm.response.text()).to.include(\"external_urls\");\r",
									"    pm.expect(pm.response.text()).to.include(\"href\");\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"images\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"popularity\");\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"uri\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQD2EiPOo5OZOnnNSHS-QqxrOBxa2wORE807SO0uOV7U3-6AS8DsMIgvJj86msU-Y6PwbVUco0OhyO5TTUkMHkQ-eWTr_pbM-gJrofP2S-XLBR0QrmXVjfp_lxv0njtmBho4emEfFAVXUR7g4kEVmTmo2lcOZKMbUwCLFgiW-tQczi7pNGNWi3pf1pfpqs4AUWDD4Hhm85WlFYlqrNsB73CP3fPvEYIfzLWs4b_WxD9htrA3A8YCOM7Ta4_N4QCu0BWyvNJcR3MpEWmwV3oNstmvg0zy-qpcUjOlyykJBhDKgqwPEli1IduUNPlVi0-IhZKQ1N2LzIqSOSFwzc65",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists/4RAbHb0oHO62If4S7h18L0/related-artists",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"4RAbHb0oHO62If4S7h18L0",
								"related-artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "18. Get Several Categories -- valid values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"function countOccurrences(obj, keyToCount) {\r",
									"    var count = 0;\r",
									"\r",
									"    function recursiveCount(obj) {\r",
									"        if (typeof obj === \"object\") {\r",
									"            for (var key in obj) {\r",
									"                if (key === keyToCount) {\r",
									"                    count++;\r",
									"                }\r",
									"                recursiveCount(obj[key]);\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"    recursiveCount(obj);\r",
									"    return count;\r",
									"};\r",
									"pm.test(\"Category names as many as limit value is specified\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    var limit = responseBody.categories.limit;\r",
									"    var nameCount = countOccurrences(responseBody, \"name\");\r",
									"    pm.expect(nameCount).to.equal(limit);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'error' shows up in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Checking of HTTP method - Get\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'Party' category shows up\", function () {\r",
									"    var categories = pm.response.json().categories.items;\r",
									"    var categoryExists = categories.some(function (category) {\r",
									"        return category.name === \"Party\";\r",
									"    });\r",
									"    pm.expect(categoryExists).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"First category is 'Romantica'\", function () {\r",
									"    var firstCategoryName = pm.response.json().categories.items[0].name;\r",
									"    pm.expect(firstCategoryName).to.equal(\"Romantică\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories?locale=ro_RO&limit=10&offset=1&country=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							],
							"query": [
								{
									"key": "locale",
									"value": "ro_RO"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "country",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "19. Get Single Category -- valid values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking of HTTP method - Get\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check the total number of categories\", function () {\r",
									"    const categories = pm.response.json().categories;\r",
									"    pm.expect(categories).to.have.property(\"total\", 47);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if the 'categories' field exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"categories\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if the response is valid JSON\", function () {\r",
									"    pm.response.to.be.json; // Check if the response is in JSON format\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'error' shows up in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories/?category_id=dinner&locale=ro_RO&country=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories",
								""
							],
							"query": [
								{
									"key": "category_id",
									"value": "dinner"
								},
								{
									"key": "locale",
									"value": "ro_RO"
								},
								{
									"key": "country",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "20. Get Episode-- valid values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the response is valid JSON\", function () {\r",
									"    pm.response.to.be.json; // Check if the response is in JSON format\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'audio_preview_url' exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"audio_preview_url\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'error' shows up in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'explicit' is a boolean\", function () {\r",
									"    pm.expect(pm.response.json().explicit).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'images' array has at least one item\", function () {\r",
									"    pm.expect(pm.response.json().images).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if 'language' is 'en-US'\", function () {\r",
									"    pm.expect(pm.response.json().language).to.eql(\"en-US\");\r",
									"});\r",
									"pm.test(\"Check if 'external_urls' has a Spotify URL\", function () {\r",
									"    const externalUrls = pm.response.json().external_urls;\r",
									"    pm.expect(externalUrls).to.have.property(\"spotify\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/episodes/6fppkhPnw5PCspRVGhZhOG?market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"episodes",
								"6fppkhPnw5PCspRVGhZhOG"
							],
							"query": [
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "21. Get Several Episodes-- valid values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/episodes?ids=2SydVEJ8apGliqKX1W2SWS",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "2SydVEJ8apGliqKX1W2SWS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "22. Get Several Episodes-- multiple valid values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/episodes?ids=2SydVEJ8apGliqKX1W2SWS,6eY2ryN7khNgIZSv9MrpOL,260q7fUJAdR8S88JqG9slG",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "2SydVEJ8apGliqKX1W2SWS,6eY2ryN7khNgIZSv9MrpOL,260q7fUJAdR8S88JqG9slG"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "23. Get User Saved Episodes-- valid values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes?limit=1&offset=1&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "24. Get User Saved Episodes-- valid limit max value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes?limit=50&offset=0&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "25. Get User Saved Episodes-- valid limit mid-range value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes?limit=25&offset=2&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "25"
								},
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "26. Get User Saved Episodes-- other valid market value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes?limit=25&offset=2&market=GB",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "25"
								},
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "market",
									"value": "GB"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "27. Put Save Episodes for User-- valid body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"427jwbmn8JDzFbFKRxfrWC\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "07TNGl4VKA4UfM4wFehiGD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "28. Put Save Episodes for User-- valid body multiple ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"427jwbmn8JDzFbFKRxfrWC\",\"4P8dAqlFxm88Y9VVEZhriy\",\"3EWIFUOpaM9s7Pmei0r2C3\",\"0uXxESjlzZ5VfvdA2nXe1t\",\"3woccDLWFU1cvOcQ5Oflue\",\"4pVQq3r2eBDxMNsDSr3Tqu\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "07TNGl4VKA4UfM4wFehiGD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "29. Del Saved Episode -- valid values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"4P8dAqlFxm88Y9VVEZhriy\",\"0Pc7cY4izGWS1RmaTfN93B\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "07TNGl4VKA4UfM4wFehiGD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "30. Delete Saved Episodes of User-- valid body id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"0Pc7cY4izGWS1RmaTfN93B\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "07TNGl4VKA4UfM4wFehiGD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "31. Get Check Saved Episode-- valid ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes/contains?ids=260q7fUJAdR8S88JqG9slG,4P8dAqlFxm88Y9VVEZhriy",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "260q7fUJAdR8S88JqG9slG,4P8dAqlFxm88Y9VVEZhriy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "32. Get Check Saved Episode-- not saved id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes/contains?ids=4P8dAqlFxm88Y9VVEZhriy",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "4P8dAqlFxm88Y9VVEZhriy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "33. Get Genre Seeds--",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/recommendations/available-genre-seeds",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"recommendations",
								"available-genre-seeds"
							]
						}
					},
					"response": []
				},
				{
					"name": "34. Get Markets--",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/markets",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"markets"
							]
						}
					},
					"response": []
				},
				{
					"name": "35. Get Shows -- valid show",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/shows/4rOoJ6Egrf8K2IrywzwOMk?market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows",
								"4rOoJ6Egrf8K2IrywzwOMk"
							],
							"query": [
								{
									"key": "market",
									"value": "RO"
								},
								{
									"key": "id",
									"value": "4rOoJ6Egrf8K2IrywzwOMk",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "36. Get Several Shows -- valid shows",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/shows?ids=4rOoJ6Egrf8K2IrywzwOMk,2i93Ub9rGWTNVyEg0rsxPb&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "4rOoJ6Egrf8K2IrywzwOMk,2i93Ub9rGWTNVyEg0rsxPb"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "37. Get Show Episodes-- valid episodes ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/shows/2i93Ub9rGWTNVyEg0rsxPb/episodes?limit=2&offset=1&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows",
								"2i93Ub9rGWTNVyEg0rsxPb",
								"episodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "38. Get User Saved Episodes -- valid id show",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?limit=1&offset=1",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "39. Put Save Show for User -- valid id show",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?ids=5EqqB52m2bsr4k1Ii7sStc",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "5EqqB52m2bsr4k1Ii7sStc",
									"description": "maximum 50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "40. Put Save Show for User -- multiple valid ids shows",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?ids=5EqqB52m2bsr4k1Ii7sStc,1nARKz2vTIOb7gC9dusE4b,7EKD1qYk2tkRHY6u6jpmNS",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "5EqqB52m2bsr4k1Ii7sStc,1nARKz2vTIOb7gC9dusE4b,7EKD1qYk2tkRHY6u6jpmNS",
									"description": "maximum 50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "41. Del User Saved Show -- saved show id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?ids=7EKD1qYk2tkRHY6u6jpmNS",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "7EKD1qYk2tkRHY6u6jpmNS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "42. Get Check Saved Shows -- existent show",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows/contains?ids=5eodRZd3qR9VT1ip1wI7xQ",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "5eodRZd3qR9VT1ip1wI7xQ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "43. Get Check Saved Shows -- existent multiple shows",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows/contains?ids=5eodRZd3qR9VT1ip1wI7xQ,5EqqB52m2bsr4k1Ii7sStc",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "5eodRZd3qR9VT1ip1wI7xQ,5EqqB52m2bsr4k1Ii7sStc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "44. Get Search -- valid values for all params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows/contains?ids=5eodRZd3qR9VT1ip1wI7xQ,5EqqB52m2bsr4k1Ii7sStc",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "5eodRZd3qR9VT1ip1wI7xQ,5EqqB52m2bsr4k1Ii7sStc"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative testing",
			"item": [
				{
					"name": "1. Get album -- market: invalid value (L)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Check if 'error' object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if the response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if 'error' shows up in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"});\r",
									"pm.test(\"Check if 'message' in 'error' is a string\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'message' contains 'Invalid market code'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include(\"Invalid market code\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'error' object is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error).to.not.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/7qNY7C7rkJwioya4lKLrJt?market=kkk",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"7qNY7C7rkJwioya4lKLrJt"
							],
							"query": [
								{
									"key": "market",
									"value": "kkk"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Get album -- market: invalid value (N)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Check if 'error' object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if the response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if 'error' shows up in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"});\r",
									"pm.test(\"Check if 'message' in 'error' is a string\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'message' contains 'Invalid market code'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include(\"Invalid market code\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'error' object is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error).to.not.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/7qNY7C7rkJwioya4lKLrJt?market=288",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"7qNY7C7rkJwioya4lKLrJt"
							],
							"query": [
								{
									"key": "market",
									"value": "288"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get album -- market: invalid value (S)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/7qNY7C7rkJwioya4lKLrJt?market=****////",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"7qNY7C7rkJwioya4lKLrJt"
							],
							"query": [
								{
									"key": "market",
									"value": "****////"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Get album -- market: invalid market",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/4DZHSpFEwfDphP87KSH3jk?market=GGG",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"4DZHSpFEwfDphP87KSH3jk"
							],
							"query": [
								{
									"key": "market",
									"value": "GGG"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Get several albums -- invalid nr of albums ids-21 (range 1-20)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Check if 'error' object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if the response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if 'error' shows up in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"});\r",
									"pm.test(\"Check if 'message' in 'error' is a string\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'message' contains 'too many ids requested'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include(\"too many ids requested\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'error' object is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error).to.not.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums?ids=7qNY7C7rkJwioya4lKLrJt,3K7m1TRRzyfQ3dav2JVgdj,3aTuW4BtsyyyyQa9LKqj8n,0NZQTozgPtlt5iN3hmANhy,5lf8VH2121Ngg7AD3Ps8Ch,0bhYU6Jz7XaXw9x67pSWTc,01u9MdrytYwPidRT0uoCXR,1cIdztckCGQOeGrou4xOG4,4JTFvbBdQuXIafNDMuezO0,679ytQ4HN7FspEGibjecXj,1t3Z2hSfT1fm5iHHWC65xd,128oy4BxWb3Tk4jsdwRdBq,3HNnxK7NgLXbDoxRZxNWiR,7MZzYkbHL9Tk3O6WeD4Z0Z,4otkd9As6YaxxEkIjXPiZ6,2DQhAbIgZG4QRy4mmQsFE0,47BiFcV59TQi2s9SkBo2pb,1kTlYbs28MXw7hwO0NLYif,2cWBwpqMsDJC1ZUwz813lo,4DZHSpFEwfDphP87KSH3jk,3nTMdaxlWKNs9TPL64pNDr",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums"
							],
							"query": [
								{
									"key": "ids",
									"value": "7qNY7C7rkJwioya4lKLrJt,3K7m1TRRzyfQ3dav2JVgdj,3aTuW4BtsyyyyQa9LKqj8n,0NZQTozgPtlt5iN3hmANhy,5lf8VH2121Ngg7AD3Ps8Ch,0bhYU6Jz7XaXw9x67pSWTc,01u9MdrytYwPidRT0uoCXR,1cIdztckCGQOeGrou4xOG4,4JTFvbBdQuXIafNDMuezO0,679ytQ4HN7FspEGibjecXj,1t3Z2hSfT1fm5iHHWC65xd,128oy4BxWb3Tk4jsdwRdBq,3HNnxK7NgLXbDoxRZxNWiR,7MZzYkbHL9Tk3O6WeD4Z0Z,4otkd9As6YaxxEkIjXPiZ6,2DQhAbIgZG4QRy4mmQsFE0,47BiFcV59TQi2s9SkBo2pb,1kTlYbs28MXw7hwO0NLYif,2cWBwpqMsDJC1ZUwz813lo,4DZHSpFEwfDphP87KSH3jk,3nTMdaxlWKNs9TPL64pNDr"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Get several albums -- invalid nr of albums ids-0 (range 1-20)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an error object\", function () {\r",
									"    pm.response.to.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'invalid id'\", function () {\r",
									"    pm.response.to.have.jsonBody({ \"error\": { \"message\": \"invalid id\" } });\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message exists\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is a string \", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error contains 'invalid id'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include('invalid id');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums?ids=",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums"
							],
							"query": [
								{
									"key": "ids",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Get several albums -- invalid albums ids-L (range 1-20)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums?ids=Ddasdasdafffff",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums"
							],
							"query": [
								{
									"key": "ids",
									"value": "Ddasdasdafffff"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Get several albums -- invalid nr of albums ids-N (range 1-20)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums?ids=54645645555",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums"
							],
							"query": [
								{
									"key": "ids",
									"value": "54645645555"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Get several albums -- invalid nr of albums ids-S (range 1-20)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums?ids=***///.-+)(",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums"
							],
							"query": [
								{
									"key": "ids",
									"value": "***///.-+)("
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Get albums tracks -- valid market, valid offset, invalid limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an error object\", function () {\r",
									"    pm.response.to.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Bad limit, limit must be larger than 0'\", function () {\r",
									"    pm.response.to.have.jsonBody({ \"error\": { \"message\": \"Bad limit, limit must be larger than 0\" } });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is a string \", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message contains 'Bad limit, limit must be larger than 0'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include('Bad limit, limit must be larger than 0');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/2DQhAbIgZG4QRy4mmQsFE0/tracks?market=RO&offset=2&limit=-2",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"2DQhAbIgZG4QRy4mmQsFE0",
								"tracks"
							],
							"query": [
								{
									"key": "market",
									"value": "RO"
								},
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "-2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "11. Get albums tracks -- invalid market, valid offset, valid limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/2DQhAbIgZG4QRy4mmQsFE0/tracks?market=GGG&offset=2&limit=2",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"2DQhAbIgZG4QRy4mmQsFE0",
								"tracks"
							],
							"query": [
								{
									"key": "market",
									"value": "GGG"
								},
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "12. Get albums tracks -- valid market, invalid offset, valid limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/2DQhAbIgZG4QRy4mmQsFE0/tracks?market=RO&offset=2562&limit=2",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"2DQhAbIgZG4QRy4mmQsFE0",
								"tracks"
							],
							"query": [
								{
									"key": "market",
									"value": "RO"
								},
								{
									"key": "offset",
									"value": "2562"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "13. Get albums tracks -- invalid limit-0 (0-50 range)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Bad limit, limit must be larger than 0'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal(\"Bad limit, limit must be larger than 0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is of string type\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message contains 'Bad limit, limit must be larger than 0'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include('Bad limit, limit must be larger than 0');\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/2zIFsf5FefGkMPWS9fqg42/tracks?limit=0",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"2zIFsf5FefGkMPWS9fqg42",
								"tracks"
							],
							"query": [
								{
									"key": "limit",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "14. Get albums tracks -- invalid limit-1563 (0-50 range)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid limit, cannot be greater than 50'\", function () {\r",
									"    pm.response.to.have.jsonBody({ \"error\": { \"message\": \"Invalid limit, cannot be greater than 50\" } });\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is of string type\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message contains 'Invalid limit, cannot be greater than 50'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include('Invalid limit, cannot be greater than 50');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/2zIFsf5FefGkMPWS9fqg42/tracks?limit=1563",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"2zIFsf5FefGkMPWS9fqg42",
								"tracks"
							],
							"query": [
								{
									"key": "limit",
									"value": "1563"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "15. Get albums tracks -- invalid limit-S (0-50 range)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/2zIFsf5FefGkMPWS9fqg42/tracks?limit=//,.,.,.()()()",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"2zIFsf5FefGkMPWS9fqg42",
								"tracks"
							],
							"query": [
								{
									"key": "limit",
									"value": "//,.,.,.()()()"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "16. Get albums tracks -- invalid limit-L (0-50 range)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/2zIFsf5FefGkMPWS9fqg42/tracks?limit=ABCYY",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"2zIFsf5FefGkMPWS9fqg42",
								"tracks"
							],
							"query": [
								{
									"key": "limit",
									"value": "ABCYY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "17. Get albums tracks -- invalid offset-L (default-0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/2zIFsf5FefGkMPWS9fqg42/tracks?limit=1&offset=QQQwQwWW",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"2zIFsf5FefGkMPWS9fqg42",
								"tracks"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "QQQwQwWW"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "18. Get albums tracks -- invalid offset-N (default-0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/1t3Z2hSfT1fm5iHHWC65xd/tracks?limit=1&offset=7",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"1t3Z2hSfT1fm5iHHWC65xd",
								"tracks"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "19. Get albums tracks -- invalid offset-S (default-0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBjNPZ3YwDbExuDX90acoQhjjQE0rOsHn1R95mEp6Vo0QKJ6cN2ln3R5NoqnXmCkG6Dqqk9s_TqlgkUt0U-39nDqxWszzIauB9mT-uUOlPDJ8PI98zH5yWGE9MAqw5amimipFncNrPhID5RTvyNIulBFUno9l8lfhN9hKTntrFtSCNb30n6P1GcOfHB3qO9tPvD3bhM5karE_J7OTvgmDa5_cauyUyZy8_Piq_5IzygYoC8JXsPLpkrzZe-Y6pcbO-k1QFvREcaL2ZKWLCc-8O-m8bM8oLcU5JJ5PqwcNzW_atRliOmB2SV9p0JRENUtrC2_QZWSgbnov-eLtlL",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/1t3Z2hSfT1fm5iHHWC65xd/tracks?limit=1&offset=*S*",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"1t3Z2hSfT1fm5iHHWC65xd",
								"tracks"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "*S*"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Get albums tracks -- valid offset-3 (0-default)NoLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCj1JnpSHrsClj0OKUCjDPi7CUHnzWd-S3vbL-9abaXycAqzwFTgcaiA9LI1t07ZTsh-eRhB7SHoRnM6PDYgZ21aKsKUSGl_FRv57WH3Bz3GNMEF0Mh4IqUU4EzdzrydecMCP7hNl05Tqvf5kqPgziTGA-ZRDXMuH6DNKsXfpm9kkr0UWlzbHap1W7NKdC8brAGOrpeTcO3Tl8Hs6zr-9bqckek7zDC7BazBY1dHAeyL-qklV6fby5pu1_N1Xig6fnaxIIZtBoa9YMmxIRvsTje9l9RmFqQAGHe8KCoMkPit3h0sFfY0Tldc3CvEy9z4-ghb8LemWx9B4T-MjLF",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/1t3Z2hSfT1fm5iHHWC65xd/tracks?offset=3&limit=",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"1t3Z2hSfT1fm5iHHWC65xd",
								"tracks"
							],
							"query": [
								{
									"key": "offset",
									"value": "3"
								},
								{
									"key": "limit",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "20. Get Users Saved Albums -- invalid offset, valid limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message is 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal(\"Bad request.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is of string type\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message contains 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include('Bad request.');\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is a positive number\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums?limit=1&offset=J",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "J"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "21. Get Users Saved Albums -- invalid offset, valid market/limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message is 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal(\"Bad request.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is of string type\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message contains 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include('Bad request.');\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is a positive number\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums?limit=1&offset=-2&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "-2"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "22. Get Users Saved Albums --  invalid limit, valid offset/market",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message is 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal(\"Bad request.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is of string type\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message contains 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include('Bad request.');\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is a positive number\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums?limit=ASC&offset=2&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums"
							],
							"query": [
								{
									"key": "limit",
									"value": "ASC"
								},
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "23. Get Users Saved Albums -- invalid market, valid offset/limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message is 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal(\"Bad request.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is of string type\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message contains 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include('Bad request.');\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is a positive number\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums?limit=ASC&offset=2&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums"
							],
							"query": [
								{
									"key": "limit",
									"value": "ASC"
								},
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "24. Save Album -- add invalid album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message is 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal(\"Bad request.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is of string type\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message contains 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include('Bad request.');\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is a positive number\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"01u9MdrytYwPidRT0uoCXRRR\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "25. Save Album -- add no album",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAXC9C4wUeuW6Sgym5yeNTaZPiSR4fZHekQlD0mCuhIEZr-4WsVIRHz4f_PuLzkv9H_fbZTwov2TYjN4ZcIxsdBypFhVnwzwZOdfUzfVQAEeG0vcFmz6ZJovwdVbv998b0XbCa_bmiNPGRLW6DVXXtBJDFbCvU39YW7NZMipu02ErN0sgQ5VnRFL_xLIWIPDLMMjvb5rNOcL1sHpSrwIz1oXjDtu1cwfnH0xM1aX10WU4Jl5g9d805oZ3-tDJ1OgB3AXjqDMZjB2zNnUgsEyMvcdhEVsQ-IHzC4q07rxEUJSXY5MK2Cs7JNQH_Tk60PkJf3itOIZiQUcP7NivBj",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "26. Get Check Album -- invalid album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message is 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal(\"Bad request.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is of string type\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message contains 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include('Bad request.');\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is a positive number\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums/contains?ids=7qNY7C7rkJwioya4lKLrJtt",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "7qNY7C7rkJwioya4lKLrJtt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "27. Get Check Album -- inexistent album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Response has exactly one element\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Element at index 0 is boolean\", function () {\r",
									"    pm.expect(pm.response.json()[0]).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"Element at index 0 is false\", function () {\r",
									"    pm.expect(pm.response.json()[0]).to.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is a positive number\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums/contains?ids=01u9MdrytYwPidRT0uoCXr",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "01u9MdrytYwPidRT0uoCXr"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "28. Get New Releases -- invalid country , valid limit/offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an 'error' property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'status' property\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'message' property\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid country code'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal(\"Invalid country code\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/new-releases?limit=2&offset=2&country=ZZ",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"new-releases"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "country",
									"value": "ZZ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "29. Get New Releases -- invalid offset , valid limit/country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an 'error' property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'status' property\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'message' property\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid offset'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal(\"Invalid offset\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/new-releases?limit=2&offset=%10&country=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"new-releases"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "offset",
									"value": "%10"
								},
								{
									"key": "country",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "30. Get Artist -- valid id of inexistent artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an 'error' property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'status' property\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'message' property\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 404\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message contains 'Non existing id'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.contain(\"Non existing id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message contains the artist ID\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.contain(\"'spotify:artist:4RAbHb0oHO62If4S7h18LO'\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is a string\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBoDnK3wHHFX54kQEZVy1C2ITv4ddUvD_Bxvt36T4l3YJgFmkqJIqYwMcKF55CYI-5PSmnHtw7aympTin2160G8LAp3rizOk_nJNz83M2HMtcroe17EzCfjhKALFjisL4Nr-142Q4vXmmC_aCP6sWyhUDlsKWXOYpQSwKM4VALXN11ALE2HL_QC_h1MEeAawXjoljGUscgfj6f2OcvbBqR6O2ZjNCU7Oti7ZZu4vBelCban8kAgF7H_BXUNPR1jjazghUK-Lxv9-xbodv2HEfL9CQBxUmT7si1hzc-ywGOKUxfCEHXOFYi-Ui-td9bQq6E749E79bGoE3YPDMxN",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists/4RAbHb0oHO62If4S7h18LO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"4RAbHb0oHO62If4S7h18LO"
							]
						}
					},
					"response": []
				},
				{
					"name": "31. Get Artist -- invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an error object\", function () {\r",
									"    pm.response.to.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'invalid id'\", function () {\r",
									"    pm.response.to.have.jsonBody({ \"error\": { \"message\": \"invalid id\" } });\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is of string type\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message contains 'invalid id'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include('invalid id');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAHBhhBSQndhlBxTUGM--WszvDVAy0kzqzUnAGQX3VG9WSpgwfwzEz_qnPXQFJ_1EnYH_f1R1doFmmIdPI9Dj1uOOvYWNJMo-e0dNk8rZBjcBmCvrYTQ2Dy3DGvd8cMZkOpDTmJ0GfyiZ8HTnHrO8iIGTeNQ7B118eyjv4NjYAketj7r4pejYZO5CShJt8sWMy8fCfH6Emad0f4eXYYGEg15flOIJzpJQEuJ0ULrhKb_jds8fqhw9Hkp7DlF184Z4rV1Jj-20LIpyoXUf9mWDNU8QaqcfjKjCQJESGvHL7adye0oyNdD9jpfxXnmKNmtaTgu6WkfC5zhA82Pkjl",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists/4RAbHb0oHO62If4S7h18LO5",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"4RAbHb0oHO62If4S7h18LO5"
							]
						}
					},
					"response": []
				},
				{
					"name": "32. Get Several Artists -- invalid ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an 'artists' property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('artists');\r",
									"});\r",
									"\r",
									"pm.test(\"Artists property is an array\", function () {\r",
									"    pm.expect(pm.response.json().artists).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Artists array has a length of 2\", function () {\r",
									"    pm.expect(pm.response.json().artists).to.have.lengthOf(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Both elements in 'artists' array are null\", function () {\r",
									"    pm.expect(pm.response.json().artists).to.eql([null, null]);\r",
									"});\r",
									"\r",
									"pm.test(\"Both elements are of type 'null'\", function () {\r",
									"    pm.expect(pm.response.json().artists).to.satisfy(function (artists) {\r",
									"        return artists.every(function (artist) {\r",
									"            return artist === null;\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists?ids=572uUqNnEoaTeR0PuZHtyLLLk, DDDDDDDDDDDDDDDDDDDS",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists"
							],
							"query": [
								{
									"key": "ids",
									"value": "572uUqNnEoaTeR0PuZHtyLLLk, DDDDDDDDDDDDDDDDDDDS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "33. Get Several Artists -- valid + invalid ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an 'artists' property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('artists');\r",
									"});\r",
									"\r",
									"pm.test(\"Artists property is an array\", function () {\r",
									"    pm.expect(pm.response.json().artists).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Artists array has a length of 2\", function () {\r",
									"    pm.expect(pm.response.json().artists).to.have.lengthOf(2);\r",
									"});\r",
									"\r",
									"pm.test(\"First artist object is not null\", function () {\r",
									"    pm.expect(pm.response.json().artists[0]).to.be.an('object');\r",
									"    pm.expect(pm.response.json().artists[0]).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Second artist object is null\", function () {\r",
									"    pm.expect(pm.response.json().artists[1]).to.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"First artist has a 'name' property\", function () {\r",
									"    pm.expect(pm.response.json().artists[0]).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Second artist is null\", function () {\r",
									"    pm.expect(pm.response.json().artists[1]).to.equal(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists?ids=572uUqNnEoaTeR0PuZHtyk, DDDDDDDDDDDDDDDDDDDS",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists"
							],
							"query": [
								{
									"key": "ids",
									"value": "572uUqNnEoaTeR0PuZHtyk, DDDDDDDDDDDDDDDDDDDS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "34. Get Several Artists -- inexistent ids",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQDpZoLb8Uso1atOHpfV-vRySqT7aeJpr6Q2bQwBcM4QQFO1cz9ZI91QEOEZfj9_Lev9mh8qUqLSfWjgCES1fkRqZ_2xtogsUs8TvEUbQza1JmMGP9g7PN8I4NLevOvKmHh3GYd2NfQckpKzL4uVl9PFoR4hdig3rRRCP86th1e2WJ-6vp7BanG7ZUMlYs0VWDxOm04XzwffevtQoFuQ1FupTNfO2VXJ7jMyU_jWUW_cxSAIP8zsJmARgi0Y3R8KYWiyGvzemAFEGI6FI6RdSGhs_c0UF7BDuXSyi5JIbpIIQe0fbAhaZmM5jO9pgJQMdt28ZY8WRcizVTY7m-X5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists?ids=572uUqNnEoaTeR0PuZHtyK",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists"
							],
							"query": [
								{
									"key": "ids",
									"value": "572uUqNnEoaTeR0PuZHtyK"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "35. Get Several Artists -- using album ids",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQDpZoLb8Uso1atOHpfV-vRySqT7aeJpr6Q2bQwBcM4QQFO1cz9ZI91QEOEZfj9_Lev9mh8qUqLSfWjgCES1fkRqZ_2xtogsUs8TvEUbQza1JmMGP9g7PN8I4NLevOvKmHh3GYd2NfQckpKzL4uVl9PFoR4hdig3rRRCP86th1e2WJ-6vp7BanG7ZUMlYs0VWDxOm04XzwffevtQoFuQ1FupTNfO2VXJ7jMyU_jWUW_cxSAIP8zsJmARgi0Y3R8KYWiyGvzemAFEGI6FI6RdSGhs_c0UF7BDuXSyi5JIbpIIQe0fbAhaZmM5jO9pgJQMdt28ZY8WRcizVTY7m-X5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists?ids=01u9MdrytYwPidRT0uoCXR",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists"
							],
							"query": [
								{
									"key": "ids",
									"value": "01u9MdrytYwPidRT0uoCXR"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "36. Get Artists TopTracks-- valid id, invalid country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'status' property with value 400\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('status', 400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'message' property\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid market code'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal('Invalid market code');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists/4RAbHb0oHO62If4S7h18L0/top-tracks?country=ZZ",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"4RAbHb0oHO62If4S7h18L0",
								"top-tracks"
							],
							"query": [
								{
									"key": "country",
									"value": "ZZ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "37. Get Artists TopTracks-- invalid id, valid country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 404 status code\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'status' property with value 404\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('status', 404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Not found.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal('Not found.');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists/4RabHb0oHO62If4S7h18L0/top-tracks?country=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"4RabHb0oHO62If4S7h18L0",
								"top-tracks"
							],
							"query": [
								{
									"key": "country",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "38. Get Artists TopTracks-- invalid id, invalid country",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCHSYeCM6ja02qZkuMHUuq4iHuyEbga5XK3a6ESX6AeXHklgDjVvaWCoMn2DaeINCu7k97-rSfgX2JeT-upyQRfbI2_mEv9Mts1iLfYajvfGy5egu36xQAsJvORpJ1ZlmdcqHMyqxPVsQRnlqLeDiV5wyZkv12T-RxFKIJweHWxKoiZFsimRwfj0Ibovy0QZk9moHJQt9eHYCWaB5Wrzkpo79AF6-brAwLhyaYkqUtKAw2fZBBm-n6cGnngMzmyd6btki8OZwlY6xgRKfc9kwx_kDRcJZqwYd_8b3TNpUvHtnA-1JPavNywPUvOrIVU0HrTVgUji2_OVraLAKX9",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists/4RabHb0oHO62If4S7h18L0/top-tracks?country=ZO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"4RabHb0oHO62If4S7h18L0",
								"top-tracks"
							],
							"query": [
								{
									"key": "country",
									"value": "ZO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "39. Get Artists TopTracks-- no id, valid country",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCHSYeCM6ja02qZkuMHUuq4iHuyEbga5XK3a6ESX6AeXHklgDjVvaWCoMn2DaeINCu7k97-rSfgX2JeT-upyQRfbI2_mEv9Mts1iLfYajvfGy5egu36xQAsJvORpJ1ZlmdcqHMyqxPVsQRnlqLeDiV5wyZkv12T-RxFKIJweHWxKoiZFsimRwfj0Ibovy0QZk9moHJQt9eHYCWaB5Wrzkpo79AF6-brAwLhyaYkqUtKAw2fZBBm-n6cGnngMzmyd6btki8OZwlY6xgRKfc9kwx_kDRcJZqwYd_8b3TNpUvHtnA-1JPavNywPUvOrIVU0HrTVgUji2_OVraLAKX9",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists/top-tracks?country=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"top-tracks"
							],
							"query": [
								{
									"key": "country",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "40. Get Artists related artists-- invalid artist id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCHSYeCM6ja02qZkuMHUuq4iHuyEbga5XK3a6ESX6AeXHklgDjVvaWCoMn2DaeINCu7k97-rSfgX2JeT-upyQRfbI2_mEv9Mts1iLfYajvfGy5egu36xQAsJvORpJ1ZlmdcqHMyqxPVsQRnlqLeDiV5wyZkv12T-RxFKIJweHWxKoiZFsimRwfj0Ibovy0QZk9moHJQt9eHYCWaB5Wrzkpo79AF6-brAwLhyaYkqUtKAw2fZBBm-n6cGnngMzmyd6btki8OZwlY6xgRKfc9kwx_kDRcJZqwYd_8b3TNpUvHtnA-1JPavNywPUvOrIVU0HrTVgUji2_OVraLAKX9",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/artists/4RAbHb0oHO62If4S7h18L0/related-artists",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"artists",
								"4RAbHb0oHO62If4S7h18L0",
								"related-artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "41. Get Several Categories-- invalid limit(L), valid offset/country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'status' property with value 400\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('status', 400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid limit'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal('Invalid limit');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error object does not have a 'details' property\", function () {\r",
									"    pm.expect(pm.response.json().error).to.not.have.property('details');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories?locale=ro_RO&limit=A&offset=1&country=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							],
							"query": [
								{
									"key": "locale",
									"value": "ro_RO"
								},
								{
									"key": "limit",
									"value": "A"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "country",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "42. Get Several Categories-- invalid limit(neg), valid offset/country",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCFagXkNr_ulZHiW5oOeRDd0_tzZEtXkCLv6-6HO_FcqJJx2Qxb10uorGArRzYlSSAgErQyt50rQD5cF33eMfA6LFZBaO1CAW_8XvqDmHhLJwHb7ZuMAEWgX695AJonscyQ51HVwW8QOlgOttKT0nVaEaQ2JDeDz5SHlctgnm4BAgzbuqh1zuy3aueP4f9U8xTMZKls1hWOUH6kSd2D663LO6K9Cdu3mYFs8DrNz9o0r9oh3w8ENw4s1x97RLNzVwLtq0UMKU_pV4vl5gjtAdqABoQkLdU0nQXyOYjzUPwAZwP23eu81xwgbn0vsvilwb5NA8h5H0Mz_CN5bKM-",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories?locale=ro_RO&limit=-5&offset=1&country=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							],
							"query": [
								{
									"key": "locale",
									"value": "ro_RO"
								},
								{
									"key": "limit",
									"value": "-5"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "country",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "43. Get Several Categories-- invalid limit(S), valid offset/country",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCFagXkNr_ulZHiW5oOeRDd0_tzZEtXkCLv6-6HO_FcqJJx2Qxb10uorGArRzYlSSAgErQyt50rQD5cF33eMfA6LFZBaO1CAW_8XvqDmHhLJwHb7ZuMAEWgX695AJonscyQ51HVwW8QOlgOttKT0nVaEaQ2JDeDz5SHlctgnm4BAgzbuqh1zuy3aueP4f9U8xTMZKls1hWOUH6kSd2D663LO6K9Cdu3mYFs8DrNz9o0r9oh3w8ENw4s1x97RLNzVwLtq0UMKU_pV4vl5gjtAdqABoQkLdU0nQXyOYjzUPwAZwP23eu81xwgbn0vsvilwb5NA8h5H0Mz_CN5bKM-",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories?locale=ro_RO&limit=**//&offset=1&country=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							],
							"query": [
								{
									"key": "locale",
									"value": "ro_RO"
								},
								{
									"key": "limit",
									"value": "**//"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "country",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "44. Get Several Categories-- invalid offset(neg), valid limit/country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'status' property with value 400\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('status', 400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Bad offset, offset must be greater than or equal to 0'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal('Bad offset, offset must be greater than or equal to 0');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories?locale=ro_RO&limit=1&offset=-1&country=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							],
							"query": [
								{
									"key": "locale",
									"value": "ro_RO"
								},
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "-1"
								},
								{
									"key": "country",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "45. Get Several Categories-- invalid offset(S), valid limit/country",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCFagXkNr_ulZHiW5oOeRDd0_tzZEtXkCLv6-6HO_FcqJJx2Qxb10uorGArRzYlSSAgErQyt50rQD5cF33eMfA6LFZBaO1CAW_8XvqDmHhLJwHb7ZuMAEWgX695AJonscyQ51HVwW8QOlgOttKT0nVaEaQ2JDeDz5SHlctgnm4BAgzbuqh1zuy3aueP4f9U8xTMZKls1hWOUH6kSd2D663LO6K9Cdu3mYFs8DrNz9o0r9oh3w8ENw4s1x97RLNzVwLtq0UMKU_pV4vl5gjtAdqABoQkLdU0nQXyOYjzUPwAZwP23eu81xwgbn0vsvilwb5NA8h5H0Mz_CN5bKM-",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories?locale=ro_RO&limit=1&offset=.1.&country=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							],
							"query": [
								{
									"key": "locale",
									"value": "ro_RO"
								},
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": ".1."
								},
								{
									"key": "country",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "46. Get Several Categories-- invalid country (S), valid limit/offset",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCFagXkNr_ulZHiW5oOeRDd0_tzZEtXkCLv6-6HO_FcqJJx2Qxb10uorGArRzYlSSAgErQyt50rQD5cF33eMfA6LFZBaO1CAW_8XvqDmHhLJwHb7ZuMAEWgX695AJonscyQ51HVwW8QOlgOttKT0nVaEaQ2JDeDz5SHlctgnm4BAgzbuqh1zuy3aueP4f9U8xTMZKls1hWOUH6kSd2D663LO6K9Cdu3mYFs8DrNz9o0r9oh3w8ENw4s1x97RLNzVwLtq0UMKU_pV4vl5gjtAdqABoQkLdU0nQXyOYjzUPwAZwP23eu81xwgbn0vsvilwb5NA8h5H0Mz_CN5bKM-",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories?locale=ro_RO&limit=1&offset=1&country=*RO*",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							],
							"query": [
								{
									"key": "locale",
									"value": "ro_RO"
								},
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "country",
									"value": "*RO*"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "47. Get Several Categories-- invalid country (N), valid limit/offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error object has a 'message' property\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid country code'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal('Invalid country code');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is of type string\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object does not have additional properties\", function () {\r",
									"    const errorKeys = Object.keys(pm.response.json().error);\r",
									"    pm.expect(errorKeys).to.have.lengthOf(2);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories?locale=ro_RO&limit=1&offset=1&country=22",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							],
							"query": [
								{
									"key": "locale",
									"value": "ro_RO"
								},
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "country",
									"value": "22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "48. Get Several Categories-- invalid values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid offset'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal('Invalid offset');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories?locale=ro_RO&limit=-*&offset=90.2&country=Rz+",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories"
							],
							"query": [
								{
									"key": "locale",
									"value": "ro_RO"
								},
								{
									"key": "limit",
									"value": "-*"
								},
								{
									"key": "offset",
									"value": "90.2"
								},
								{
									"key": "country",
									"value": "Rz+"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Get albums tracks -- valid offset-3 (0-default)InvalidLimit",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCvxZExsZ_qzxsmrv5fTWMzU72j8aVbQ-uqQZNIN5Rm2JiY877xa4XI-vjJfEtdmROXuGiK4GmfF3kGxZMkxJ2ni_sKa5hbiURtbI7BN2MPmsWNxYTkVs8coWyGsYDXza1vdBnyK5hQRx9K8Z3F1Gz4AfINkS7POn_C_dn-GPJFBB4qBx3E78tKruT1myc42yI1FhPZLey4ViveDRJB_5_nWt-2YV60XEdF8uY2Jp0ik-jFQIj1njUZZQdlxn0BclQcxSFU_UWdgtdagefe6xbEQ1yK7OF_f0Fculw6R455KM2NOxnG3KP0W2alnHfIP9RBNkArFkFzjZR2HfAB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/albums/1t3Z2hSfT1fm5iHHWC65xd/tracks?offset=3&limit=-1",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"albums",
								"1t3Z2hSfT1fm5iHHWC65xd",
								"tracks"
							],
							"query": [
								{
									"key": "offset",
									"value": "3"
								},
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "49. Get Several Categories-- invalid country, valid id/locale",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAD_mZ7D0U6B1K_kmF6riZzT7ccfyNEp1RUcfs2nsu3k3dgVu5OO6QoZy7bjqZI_b1JsPHEVeRPYMo9EI-UFqiWeyZEpYQmIL3p0B1dVjl0EtGQR3B9og3-CmQ7mxaA9dCPTfaGdYYt1-FLL-3a7hdFaIiicNxfUHqQg4SKNokXzZVW5tKLtjgYAOw73R8eNE9o6xsMX7TCBQl_dYb2yU55aWYlATh6owi8Ygyd3cY4-2jgPQhCxMhYA2gZuDURYEwB-ySz-U1z1wUb7n8isYgzryoUG9ywyCICJAUP3K5lh9R8wl827akcmBAXB4iKHVnNJaJkLZ_MI4sVTGQV",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories/?category_id=sunset&country=ZZ&locale=ro_RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories",
								""
							],
							"query": [
								{
									"key": "category_id",
									"value": "sunset",
									"description": "\n"
								},
								{
									"key": "country",
									"value": "ZZ"
								},
								{
									"key": "locale",
									"value": "ro_RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "50. Get Several Categories-- invalid locale , valid id/country",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAD_mZ7D0U6B1K_kmF6riZzT7ccfyNEp1RUcfs2nsu3k3dgVu5OO6QoZy7bjqZI_b1JsPHEVeRPYMo9EI-UFqiWeyZEpYQmIL3p0B1dVjl0EtGQR3B9og3-CmQ7mxaA9dCPTfaGdYYt1-FLL-3a7hdFaIiicNxfUHqQg4SKNokXzZVW5tKLtjgYAOw73R8eNE9o6xsMX7TCBQl_dYb2yU55aWYlATh6owi8Ygyd3cY4-2jgPQhCxMhYA2gZuDURYEwB-ySz-U1z1wUb7n8isYgzryoUG9ywyCICJAUP3K5lh9R8wl827akcmBAXB4iKHVnNJaJkLZ_MI4sVTGQV",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories/?category_id=sunset&country=RO&locale=**ZZ_pZ",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories",
								""
							],
							"query": [
								{
									"key": "category_id",
									"value": "sunset",
									"description": "\n"
								},
								{
									"key": "country",
									"value": "RO"
								},
								{
									"key": "locale",
									"value": "**ZZ_pZ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "51. Get Episode-- invalid market, valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid market code'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal(\"Invalid market code\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error status code is 400\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error object contains 'message' key\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object contains 'status' key\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('status');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/episodes/6fppkhPnw5PCspRVGhZhOG?market=ZZ",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"episodes",
								"6fppkhPnw5PCspRVGhZhOG"
							],
							"query": [
								{
									"key": "market",
									"value": "ZZ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "52. Get Episode-- invalid id, valid market",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 404 status code\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is 'Non existing id: 'spotify:episode:5fppkhPnw5PCspRVGhZhOG''\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal(\"Non existing id: 'spotify:episode:5fppkhPnw5PCspRVGhZhOG'\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error status code is 404\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error object contains 'message' key\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('message');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/episodes/5fppkhPnw5PCspRVGhZhOG?market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"episodes",
								"5fppkhPnw5PCspRVGhZhOG"
							],
							"query": [
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "53. Get Several Episodes-- multiple invalid and valid values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Episode object exists\", function () {\r",
									"    pm.expect(pm.response.json().episodes[1]).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Episode has 'id' property\", function () {\r",
									"    pm.expect(pm.response.json().episodes[1]).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Episode has 'name' property\", function () {\r",
									"    pm.expect(pm.response.json().episodes[1]).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Episode has 'description' property\", function () {\r",
									"    pm.expect(pm.response.json().episodes[1]).to.have.property('description');\r",
									"});\r",
									"\r",
									"pm.test(\"Episode has 'duration_ms' property\", function () {\r",
									"    pm.expect(pm.response.json().episodes[1]).to.have.property('duration_ms');\r",
									"});\r",
									"\r",
									"pm.test(\"Episode has 'explicit' property\", function () {\r",
									"    pm.expect(pm.response.json().episodes[1]).to.have.property('explicit');\r",
									"});\r",
									"\r",
									"pm.test(\"Episode has 'release_date' property\", function () {\r",
									"    pm.expect(pm.response.json().episodes[1]).to.have.property('release_date');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/episodes?ids=2sydVEJ8apGliqKX1W2SWS,6eY2ryN7khNgIZSv9MrpOL,26oq7fUJAdR8S88JqG9slG",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "2sydVEJ8apGliqKX1W2SWS,6eY2ryN7khNgIZSv9MrpOL,26oq7fUJAdR8S88JqG9slG"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "54. Get Several Episodes-- multiple invalid values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Episodes array contains three null values\", function () {\r",
									"    pm.expect(pm.response.json().episodes).to.eql([null, null, null]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/episodes?ids=2SydVEJ8apsGliqKX1W2SWS,6eY2ryN7khsNgIZSv9MrpOL,260q7fUJAdR8S88JqG9slGs",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "2SydVEJ8apsGliqKX1W2SWS,6eY2ryN7khsNgIZSv9MrpOL,260q7fUJAdR8S88JqG9slGs"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "55. Get Several Episodes--  invalid value(N) of id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQDrjRUhN9d7I9fMMcmGbd1BhdyDzVAZXvVvs1OewL4uKu47-14XCLi8Gv0n3F8mt0lbWZyB8gwIA_W-WIa_wDlPENnwZE_E4QDdBkJKvbNRmkN7rXZd2LGd-5unkpojQXxRMan6pti4Z0WDPpFKTGZnp3b6KvkjE4_W_rl_91w5cqnxkCgve5uL5SDN9pZT2rruPz01paMCBY8xNhK2uOR1lFMD9ORf3Vt2e_gbcSLFHYm5tDuttiSc8Q6uCq4lwFpGjGr7RqoSnfDLOSu6AkuNw8spNsLuZqlSx-DWaPMLO5P7HGp-euxbrFBow2yJW4ufBJU4cnB2TrHXTkdw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/episodes?ids=45666545646548888",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "45666545646548888"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "56. Get Several Episodes--  invalid value(S) of id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQDrjRUhN9d7I9fMMcmGbd1BhdyDzVAZXvVvs1OewL4uKu47-14XCLi8Gv0n3F8mt0lbWZyB8gwIA_W-WIa_wDlPENnwZE_E4QDdBkJKvbNRmkN7rXZd2LGd-5unkpojQXxRMan6pti4Z0WDPpFKTGZnp3b6KvkjE4_W_rl_91w5cqnxkCgve5uL5SDN9pZT2rruPz01paMCBY8xNhK2uOR1lFMD9ORf3Vt2e_gbcSLFHYm5tDuttiSc8Q6uCq4lwFpGjGr7RqoSnfDLOSu6AkuNw8spNsLuZqlSx-DWaPMLO5P7HGp-euxbrFBow2yJW4ufBJU4cnB2TrHXTkdw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/episodes?ids=*/888**/..::PPP0",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "*/888**/..::PPP0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "57. Get Several Episodes--  invalid value of id , valid market",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Episodes array contains one null value\", function () {\r",
									"    pm.expect(pm.response.json().episodes).to.eql([null]);\r",
									"});\r",
									"\r",
									"pm.test(\"Episodes array length is 1\", function () {\r",
									"    pm.expect(pm.response.json().episodes).to.have.lengthOf(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/episodes?ids=*/888**/..::PPP0&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "*/888**/..::PPP0"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "58. Get Several Episodes--  invalid market , valid id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQDrjRUhN9d7I9fMMcmGbd1BhdyDzVAZXvVvs1OewL4uKu47-14XCLi8Gv0n3F8mt0lbWZyB8gwIA_W-WIa_wDlPENnwZE_E4QDdBkJKvbNRmkN7rXZd2LGd-5unkpojQXxRMan6pti4Z0WDPpFKTGZnp3b6KvkjE4_W_rl_91w5cqnxkCgve5uL5SDN9pZT2rruPz01paMCBY8xNhK2uOR1lFMD9ORf3Vt2e_gbcSLFHYm5tDuttiSc8Q6uCq4lwFpGjGr7RqoSnfDLOSu6AkuNw8spNsLuZqlSx-DWaPMLO5P7HGp-euxbrFBow2yJW4ufBJU4cnB2TrHXTkdw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/episodes?ids=260q7fUJAdR8S88JqG9slG&market=ZZ",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "260q7fUJAdR8S88JqG9slG"
								},
								{
									"key": "market",
									"value": "ZZ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "59. Get Several Episodes--  valid market , valid double ids",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQDrjRUhN9d7I9fMMcmGbd1BhdyDzVAZXvVvs1OewL4uKu47-14XCLi8Gv0n3F8mt0lbWZyB8gwIA_W-WIa_wDlPENnwZE_E4QDdBkJKvbNRmkN7rXZd2LGd-5unkpojQXxRMan6pti4Z0WDPpFKTGZnp3b6KvkjE4_W_rl_91w5cqnxkCgve5uL5SDN9pZT2rruPz01paMCBY8xNhK2uOR1lFMD9ORf3Vt2e_gbcSLFHYm5tDuttiSc8Q6uCq4lwFpGjGr7RqoSnfDLOSu6AkuNw8spNsLuZqlSx-DWaPMLO5P7HGp-euxbrFBow2yJW4ufBJU4cnB2TrHXTkdw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/episodes?ids=260q7fUJAdR8S88JqG9slG,260q7fUJAdR8S88JqG9slG&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "260q7fUJAdR8S88JqG9slG,260q7fUJAdR8S88JqG9slG"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "60. Get User Saved Episodes-- invalid market, valid limit/offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'status' property with value 400\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('status', 400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'message' property\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid market code'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal('Invalid market code');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes?limit=25&offset=2&market=OO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "25"
								},
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "market",
									"value": "OO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "61. Get User Saved Episodes-- invalid limit(S), valid market/offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not existent\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									"pm.test(\"Response does not contain 'error'\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body length is 0\", function () {\r",
									"    pm.expect(pm.response.text().length).to.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"message\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes?limit=\\&offset=2&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "\\"
								},
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "62. Get User Saved Episodes-- invalid offset (S), valid market/limit",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAjWzOZcM_XwJepc851cJV2ofFetDC6vRoDfGjU0yeIOBfPc7iJz18v3JG2S5ar-lDeZtXBtopJ8dzARhsbLvJ0FvSo31GZi2tmDQ-Rj9MScf5Ypbv1KpHPflRsyzOsQcRW2lCB6PB-kFpJ9NrDWT30HoBKuCqeOGzFxGm6rniy2pLUYtYgYKNhHLXABWyIQ6dq7fzWYyqbdKtNOOUfL-yfYkzTXOmYl-N5ruXBRV3ey1Nuw1UCx055j0Lug3_J31Dr7yinXa01k6WhzTck48n7dMxqU4aKtRsw_Q3jLAe5V6IxkrgDKW-nALlLHiE3lMPQniInjh9wudG9I5uB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes?limit=1&offset=-2&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "-2"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "63. Get User Saved Episodes-- invalid market(S), valid offset/limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'status' property with value 400\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('status', 400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'message' property\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid market code'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal('Invalid market code');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQAK1rqkPB3P9HdexR6cwRiHLQPhAmbQEL26xW2lFDxb9tPJ_aLZxlBMQOcK5OxVJ2hpxt5w2ZPuUdbSsqWvPVwRbU15jOz0mqfBim1NjvSfyBISTHKF7gu1ht5rnkS2kCvvZvySux-Emn3te_C4yNv6PluC4DU3YGDmFBC36OziD3ecxRdHgJlURj-p4OnNIkC-eQ2XoIRbC4BD07-UMe7FQ3t_teNOPlLl60QfXO0MkUDGBeDZ2dyv6XrRxeQ0Gzt7QSMoPNNGGosnnFWTTXRjZbrCmrfcsQ0e7YbagfM77kXbPBkdSYzIWSVvYERJR-mwKzB31Pez_TjejzCn",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes?limit=1&offset=1&market=ppp",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "market",
									"value": "ppp"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "64. Put Save Episodes for User-- invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'error'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Bad request.'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.equal(\"Bad request.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body length is greater than 0\", function () {\r",
									"    pm.expect(pm.response.text().length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an empty object\", function () {\r",
									"    pm.expect(pm.response.json()).to.not.eql({});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"4pVQQ3r2eBDxMNsDSr3Tqwu\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "07TNGl4VKA4UfM4wFehiGD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "65. Put Save Episodes for User--no body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'error'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Bad request.'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.equal(\"Bad request.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body length is greater than 0\", function () {\r",
									"    pm.expect(pm.response.text().length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an empty object\", function () {\r",
									"    pm.expect(pm.response.json()).to.not.eql({});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "66. Put Save Episodes for User--invalid body id (S)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQC0CWUpU8AGL3aGUETPsjuv7FR9FkbMLdK7QtH3bptCAmxJtKIY4YffZTEoFZ7e09awuoK5fhis_c8iZF_vwGDh-K3y6nLUY44_TPK6UDna-VC-LnAePxqAc6T5v73ZbM4jwyLEGkTTPy8Hx7nof5rPGYSSrVHS_OFRvQVLZEqaeTPkvDKpJ2e5YTeXVyfnVd--5rP1KOnkpVW1QpEQqBhUO60-b4xtj8b0q4A_gzac05nAfAVzmso6kyG6hyg6di_OOParNU-zTZkPSqe7DTiAxQrb1Z--OhWxVj60Akk6nExiy4Nh0a0M5Rd6PmAKoGL1sMdh3KXipIDKKDii",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \":+====+====+2\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "67. Delete Saved Episodes of User--  inexistent id in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'error'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is 'Bad request.'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.equal(\"Bad request.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an empty object\", function () {\r",
									"    pm.expect(pm.response.json()).to.not.eql({});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"ssssssssssssss\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "07TNGl4VKA4UfM4wFehiGD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "68. Delete Saved Episodes of User--  duplicated ids in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body exists\", function () {\r",
									"    pm.response.to.not.be.with.body(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not null\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not undefined\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.equal(undefined);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"6fppkhPnw5PCspRVGhZhOG\",\"6fppkhPnw5PCspRVGhZhOG\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "07TNGl4VKA4UfM4wFehiGD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "69. Get Check Saved Episode-- invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'error'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is 'Bad request.'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.equal(\"Bad request.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an empty object\", function () {\r",
									"    pm.expect(pm.response.json()).to.not.eql({});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes?ids=07TNGl4VKA4UfM4wFehiGDaa",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "07TNGl4VKA4UfM4wFehiGDaa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "70. Get Check Saved Episode-- album id, no episode id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'error' shows up in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if header is in response\", function () {\r",
									"    pm.response.to.have.header;\r",
									"});\r",
									"\r",
									"pm.test(\"Check header is correct\",function(){\r",
									"    pm.response.to.have.header(\"x-robots-tag\");\r",
									"});\r",
									"\r",
									"pm.test(\"Checking of HTTP method - Get\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if header is in response\", function () {\r",
									"    pm.response.to.have.header;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/episodes?ids=7qNY7C7rkJwioya4lKLrJt",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"episodes"
							],
							"query": [
								{
									"key": "ids",
									"value": "7qNY7C7rkJwioya4lKLrJt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "71. Get Shows -- inexistent show, valid market",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'error'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 404\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.status).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'non existing id'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.equal(\"non existing id\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/shows/4rOoJ6Egrf8K2IrywzwoMk?market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows",
								"4rOoJ6Egrf8K2IrywzwoMk"
							],
							"query": [
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "72. Get Shows -- inexistent market, valid show",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCTnGSrA_m65VqkKRSUcpiZkk-_fmWhLNM6UUT_FHEgL4SuZLgGxmqqLJOMcxrCpNbr9WSvgwujwXh2hItvpYsXhxwEKIOVF7hNPcM3wEt0_XdVn7a92ttLGMtcbfyoMtaI4FefJO0FP0pKEDp3cEC2KRxTTEGnWrDlLzZzYYoKLu_t2EExQcSizfHtCE_1pGseK9G-MRGOdAGRYqo3nXbxFmkmV6xEOxJ4pGgjt7Rkh1g12yLm0akyyqGl_q-QiOB-axf5AhtG1_spUavHAsfuV_PNGw74erlbm1NQfh7ylMc_ihsyyNEobk50e4jaYCqyk8uDb0zPLI28iT3L",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/shows/4rOoJ6Egrf8K2IrywzwOMk?market=ZZ",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows",
								"4rOoJ6Egrf8K2IrywzwOMk"
							],
							"query": [
								{
									"key": "market",
									"value": "ZZ"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "73. Get Several Shows -- a valid show and invalid one, valid market",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains shows\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"shows\");\r",
									"});\r",
									"\r",
									"pm.test(\"Shows are in Romanian (ro-RO)\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.shows[0].languages[0]).to.equal(\"ro-RO\");\r",
									"});\r",
									"\r",
									"pm.test(\"Shows are of media type 'audio'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.shows[0].media_type).to.equal(\"audio\");\r",
									"});\r",
									"\r",
									"pm.test(\"Show has at least 100 episodes\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.shows[0].total_episodes).to.be.at.least(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Show is not explicit\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.shows[0].explicit).to.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Show is not externally hosted\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.shows[0].is_externally_hosted).to.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Show has description in Romanian\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.shows[0].description).to.include(\"cunoaștere de sine și dezvoltare personală\");\r",
									"});\r",
									"\r",
									"pm.test(\"Show has an external URL to Spotify\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.shows[0].external_urls.spotify).to.include(\"https://open.spotify.com/show/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Length of shows list is 1\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.shows.length).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/shows?ids=4rOoJ6Egrf8K2IrywzwoMk,2i93Ub9rGWTNVyEg0rsxPb&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "4rOoJ6Egrf8K2IrywzwoMk,2i93Ub9rGWTNVyEg0rsxPb"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "74. Get Several Shows -- multiple invalid shows, valid market",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is valid JSON\", () => {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"'error' object exists\", () => {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"'status' in 'error' is 400\", () => {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"'message' in 'error' is a string\", () => {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"'message' contains 'invalid id'\", () => {\r",
									"    pm.expect(pm.response.json().error.message).to.include(\"invalid id\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/shows?ids=4rOoJ6Egrf8K2IrywzwoMKK,2i93Ub9rGWTNVyEg0rsxPb5555,K2Irywzw93Ub87sad, uyqh7bcbbna9HHasyn&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "4rOoJ6Egrf8K2IrywzwoMKK,2i93Ub9rGWTNVyEg0rsxPb5555,K2Irywzw93Ub87sad, uyqh7bcbbna9HHasyn"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "75. Get Several Shows -- multiple invalid show and market",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'status' property with value 400\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('status', 400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'message' property\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid market code'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal('Invalid market code');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/shows?ids=4rOoJ6Egrf8K2IrywzwoMKK,2i93Ub9rGWTNVyEg0rsxPb5555,K2Irywzw93Ub87sad, uyqh7bcbbna9HHasyn&market=YYU",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "4rOoJ6Egrf8K2IrywzwoMKK,2i93Ub9rGWTNVyEg0rsxPb5555,K2Irywzw93Ub87sad, uyqh7bcbbna9HHasyn"
								},
								{
									"key": "market",
									"value": "YYU"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "76. Get Several Shows -- multiple valid shows and invalid market",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQCRGrIVVFS2nqKeu9erS8ZRSoqAzCFSHPQrhKHHvKz1ziorHGnDYl4BUUGCCu-HUWB4Q_LEeTHicta2LcaMPZOpQ__oIOVdE3JIOz-a-cg38eNFZsbqBPL8e4FU45nhSKQBB85Al-Ry6FZCMHVfR-gR4ywy3m3dS_X7qMCUVI8tWsN6ZgjfZn99VI6fum7U315NP4MAh4YorWv9bkAvujTS39gcR0lH-2xMHX5h93WofdiGYgvtqgLP1lHxZ3YepM5A7pbC6FzGtIw1SBeLY-JoRhoyl6dGsv8ucAybA9l1qHjZOG9avQSP77ITA7MDZTwM-erjeGRrxL3S6OQr",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/shows?ids=2i93Ub9rGWTNVyEg0rsxPb,4rOoJ6Egrf8K2IrywzwOMk&market=YYU",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "2i93Ub9rGWTNVyEg0rsxPb,4rOoJ6Egrf8K2IrywzwOMk"
								},
								{
									"key": "market",
									"value": "YYU"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "77. Get Shows Episodes-- invalid market / valid ids, limit, offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('error');\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'status' property with value 400\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('status', 400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error object has a 'message' property\", function () {\r",
									"    pm.expect(pm.response.json().error).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Invalid market code'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal('Invalid market code');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/shows/2i93Ub9rGWTNVyEg0rsxPb/episodes?limit=2&offset=1&market=PPI",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows",
								"2i93Ub9rGWTNVyEg0rsxPb",
								"episodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "market",
									"value": "PPI"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "78. Get Shows Episodes-- invalid ids / valid market, offset, limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'error'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 404\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.status).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'non existing id'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.equal(\"non existing id\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/shows/2I93Ub9rGWTNVyEg0rsxPb/episodes?limit=2&offset=1&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows",
								"2I93Ub9rGWTNVyEg0rsxPb",
								"episodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "79. Get Shows Episodes-- invalid limit / valid market, offset, id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an error message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid limit, must be a number between 1 and 50\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates a minimum limit of 1\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"number between 1 and 50\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates a maximum limit of 50\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"number between 1 and 50\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message specifically mentions invalid limit\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid limit\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/shows/2i93Ub9rGWTNVyEg0rsxPb/episodes?limit=1+7&offset=1&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows",
								"2i93Ub9rGWTNVyEg0rsxPb",
								"episodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "1+7"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "80. Get Shows Episodes-- invalid offset / valid market, limit , id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQD0UTuk07Pyh_OciOuG0qZdlTyiNoh37LufepSLslpEio3y3CsYketKSxDhsoD-CMYq6Ef9zYAi8iwT5u_wcfWJ1Uw9SJ8uxrtVq20km_YnMYZQUN3NwNtpOBlM5XLgQ3AHOCMazo3QNouphIG3_grw53Zhs2xYzqXyAoPS1S3sAnx0-9ULwIgG4Qzt9t97sWfHWlSu1wHob8smaqCVUzWqZZzLj_R3z0GWfK8gP2rlCg2upeOw54r3q-U5gF3RDibLyQ6kvWGze24BYCzoaxJ9ipj4o_RjXnxTM-pgWUEghtHOjOTymaoC5WV28lmHKdgGQYFLfOr5eS1pjtdZ",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-read-playback-position",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/shows/2i93Ub9rGWTNVyEg0rsxPb/episodes?limit=1&offset={-5}&market=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"shows",
								"2i93Ub9rGWTNVyEg0rsxPb",
								"episodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "{-5}"
								},
								{
									"key": "market",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "81. Get User Saved Episodes -- invalid limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response does not contain 'error'\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body length is 0\", function () {\r",
									"    pm.expect(pm.response.text().length).to.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an empty object\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.eql({});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?limit=*/8||||&offset=1",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "limit",
									"value": "*/8||||"
								},
								{
									"key": "offset",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "82. Get User Saved Episodes -- invalid limit/offset",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBvOzg88nVkGvCj09AYYyr0Mlk7zssbwpR2jEeH2tORQeqsjgibKmuMmyeD3z3kwRBVe6-gwVf7OwnmKqQLen8vFECyIzacV8OMS53Z2puS49DidngibfUji-o-JmEEShfsCmNMVivOJWJRYXohYLmX4UEF6sFgGvFvJp3TlPwiuAMv3nGPu7fUxg5kFAk7dqUlyiiUOy1rxkmr0pvoKe3u8XUWoJNUa-L37BljT7Ua6_wrcbffOkw5xz5aDt4mroOd_aUSFIku8esvGNouFqAGYpDsltJtjodfr2NHr29QljJ5VRgbhhdiuxw2lGnbhl2iyO8PgzK6w8YKVrfW",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?limit={(12)}&offset=788845",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "limit",
									"value": "{(12)}"
								},
								{
									"key": "offset",
									"value": "788845"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "83. Get User Saved Episodes -- invalid offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response does not contain 'error'\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body length is 0\", function () {\r",
									"    pm.expect(pm.response.text().length).to.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an empty object\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.eql({});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?limit={(12)}&offset=788845",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "limit",
									"value": "{(12)}"
								},
								{
									"key": "offset",
									"value": "788845"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "84. Put Save Show for User -- multiple invalid and valid shows ids",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBvOzg88nVkGvCj09AYYyr0Mlk7zssbwpR2jEeH2tORQeqsjgibKmuMmyeD3z3kwRBVe6-gwVf7OwnmKqQLen8vFECyIzacV8OMS53Z2puS49DidngibfUji-o-JmEEShfsCmNMVivOJWJRYXohYLmX4UEF6sFgGvFvJp3TlPwiuAMv3nGPu7fUxg5kFAk7dqUlyiiUOy1rxkmr0pvoKe3u8XUWoJNUa-L37BljT7Ua6_wrcbffOkw5xz5aDt4mroOd_aUSFIku8esvGNouFqAGYpDsltJtjodfr2NHr29QljJ5VRgbhhdiuxw2lGnbhl2iyO8PgzK6w8YKVrfW",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?ids=5EqqB52m2bsr4k1Ii7sStc,1nARKz2vTIOb7gC9dusE4b,7EKD1qYk2tkRHY6u6jpmNS",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "5EqqB52m2bsr4k1Ii7sStc,1nARKz2vTIOb7gC9dusE4b,7EKD1qYk2tkRHY6u6jpmNS",
									"description": "maximum 50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "85. Put Save Show for User -- invalid show id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'error'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Bad request.'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.equal(\"Bad request.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body length is greater than 0\", function () {\r",
									"    pm.expect(pm.response.text().length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an empty object\", function () {\r",
									"    pm.expect(pm.response.json()).to.not.eql({});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?ids=101112131415161718192021",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "101112131415161718192021",
									"description": "maximum 50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "86. Put Save Show for User -- invalid show id (S)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?ids=<{</*++-AkL9=+..>15'}>",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "<{</*++-AkL9=+..>15'}>",
									"description": "maximum 50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "87. Del User Saved Show -- not a saved show id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not have a JSON body\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.response.to.have.body(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has no content\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a content length of 0\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.equal(\"0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?ids=7EKD1qYk2tkRHY6u6jpmNS",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "7EKD1qYk2tkRHY6u6jpmNS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "88. Del User Saved Show -- multiple not saved show ids",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBvOzg88nVkGvCj09AYYyr0Mlk7zssbwpR2jEeH2tORQeqsjgibKmuMmyeD3z3kwRBVe6-gwVf7OwnmKqQLen8vFECyIzacV8OMS53Z2puS49DidngibfUji-o-JmEEShfsCmNMVivOJWJRYXohYLmX4UEF6sFgGvFvJp3TlPwiuAMv3nGPu7fUxg5kFAk7dqUlyiiUOy1rxkmr0pvoKe3u8XUWoJNUa-L37BljT7Ua6_wrcbffOkw5xz5aDt4mroOd_aUSFIku8esvGNouFqAGYpDsltJtjodfr2NHr29QljJ5VRgbhhdiuxw2lGnbhl2iyO8PgzK6w8YKVrfW",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?ids=7EKD1qYk2tkRHY6u6jpmNS,2i93Ub9rGWTNVyEg0rsxPb",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "7EKD1qYk2tkRHY6u6jpmNS,2i93Ub9rGWTNVyEg0rsxPb"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "89. Del User Saved Show -- invalid show id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									"pm.test(\"Response body length is 0\", function () {\r",
									"    pm.expect(pm.response.text().length).to.equal(0);\r",
									"});\r",
									"pm.test(\"Response is not an empty object\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.eql({});\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not null\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?ids=[{{7EKD1qYk2tkRHY6u6jpmNss546666654545465454}}]",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "[{{7EKD1qYk2tkRHY6u6jpmNss546666654545465454}}]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "90. Get Check Saved Shows -- existent multiple shows and invalid ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the first element is true\", function () {\r",
									"    pm.expect(pm.response.json()[0]).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the second element is true\", function () {\r",
									"    pm.expect(pm.response.json()[1]).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the third element is false\", function () {\r",
									"    pm.expect(pm.response.json()[2]).to.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the fourth element is false\", function () {\r",
									"    pm.expect(pm.response.json()[3]).to.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"All Elements Are Boolean\", function () {\r",
									"    const elements = pm.response.json();\r",
									"    elements.forEach(function (element) {\r",
									"        pm.expect(typeof element).to.equal(\"boolean\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Array Length Is 4\", function () {\r",
									"    const elements = pm.response.json();\r",
									"    pm.expect(elements).to.be.an('array');\r",
									"    pm.expect(elements).to.have.length(4);\r",
									"});\r",
									"\r",
									"pm.test(\"No Null Elements\", function () {\r",
									"    const elements = pm.response.json();\r",
									"    elements.forEach(function (element) {\r",
									"        pm.expect(element).to.not.equal(null);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows/contains?ids=5eodRZd3qR9VT1ip1wI7xQ,5EqqB52m2bsr4k1Ii7sStc,7EKD1qYk2tkRHY6u6jpmNS,2i93Ub9rGWTNVyEg0rsxPb",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "5eodRZd3qR9VT1ip1wI7xQ,5EqqB52m2bsr4k1Ii7sStc,7EKD1qYk2tkRHY6u6jpmNS,2i93Ub9rGWTNVyEg0rsxPb"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "91. Get Check Saved Shows -- inexistent ids shows",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"First Element Is False\", function () {\r",
									"    pm.expect(pm.response.json()[0]).to.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Second Element Is False\", function () {\r",
									"    pm.expect(pm.response.json()[1]).to.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Third Element Is False\", function () {\r",
									"    pm.expect(pm.response.json()[2]).to.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"All Elements Are Boolean\", function () {\r",
									"    const elements = pm.response.json();\r",
									"    elements.forEach(function (element) {\r",
									"        pm.expect(typeof element).to.equal(\"boolean\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Checking of HTTP method - Get\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check length of body response\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.lengthOf(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows/contains?ids=7EKD1qYk2tkRHY6u6jpmNS,2i93Ub9rGWTNVyEg0rsxPb,059sh395dgSCd18NBafuEw",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "7EKD1qYk2tkRHY6u6jpmNS,2i93Ub9rGWTNVyEg0rsxPb,059sh395dgSCd18NBafuEw"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "92. Get Check Saved Shows -- invalid ids shows",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQC1qz4R2YiIqJcTD7zoBdl8G9qJRY1-UxOoM-C2-RGnAFAnQtXxayjmC3hvEALYkO0xWi0mnbENtQvUDvmHuXmzJZtbt12dN0aEjygWA3IkZUZyP3p0rIWH_clpUOe-HxQ7xCu9dbw-imF_08n2n6JOfq8SBNfEDzFmoRqk80aAjPzLx_6TWuc8p2zGPuk1gi3CL_3a8FcNe8AdUceCgaedXb5JFfX-tglyyX3iCgTcoUuSQ9apRy4w7OWpChCSMT9iUQ6SlYx0whYQBaSfIAsfJrlHv2WK3JBz-hQVpDh0LJ4h0wEt7RchLYqL9v6ZWls0zONjrkcnV-7e-ujD",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows/contains?ids=7eeKD1qYk2tkRHY6u6jpmNS,2i93Ub9rgwtNVyEg0rsxPb,059sh395dgSCd18NBafuEwW",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "7eeKD1qYk2tkRHY6u6jpmNS,2i93Ub9rgwtNVyEg0rsxPb,059sh395dgSCd18NBafuEwW"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "93. Get Check Saved Shows -- invalid ids shows (N)",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQC1qz4R2YiIqJcTD7zoBdl8G9qJRY1-UxOoM-C2-RGnAFAnQtXxayjmC3hvEALYkO0xWi0mnbENtQvUDvmHuXmzJZtbt12dN0aEjygWA3IkZUZyP3p0rIWH_clpUOe-HxQ7xCu9dbw-imF_08n2n6JOfq8SBNfEDzFmoRqk80aAjPzLx_6TWuc8p2zGPuk1gi3CL_3a8FcNe8AdUceCgaedXb5JFfX-tglyyX3iCgTcoUuSQ9apRy4w7OWpChCSMT9iUQ6SlYx0whYQBaSfIAsfJrlHv2WK3JBz-hQVpDh0LJ4h0wEt7RchLYqL9v6ZWls0zONjrkcnV-7e-ujD",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows/contains?ids=75557178921236865645625,059sh395dgSCd18NBafuEw",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "75557178921236865645625,059sh395dgSCd18NBafuEw"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "94. Get Check Saved Shows -- out of range (max) ids nr.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error message is 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.equal(\"Bad request.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is not empty\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is of string type\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Error message contains 'Bad request.'\", function () {\r",
									"    pm.expect(pm.response.json().error.message).to.include('Bad request.');\r",
									"});\r",
									"\r",
									"pm.test(\"Error status is 400\", function () {\r",
									"    pm.expect(pm.response.json().error.status).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response content type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows/contains?ids=059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": "059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw,059sh395dgSCd18NBafuEw"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "95. Get Check Saved Shows -- out of range (min) ids nr. - no id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows/contains?ids=",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows",
								"contains"
							],
							"query": [
								{
									"key": "ids",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "96. Save Album -- add existing album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is not null\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not undefined\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.equal(undefined);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking of HTTP method - Put\", function () {\r",
									"    pm.expect(pm.request.method).to.equal(\"PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"01u9MdrytYwPidRT0uoCXR\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "97. Delete Album -- invalid album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain 'error'\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body length is 0\", function () {\r",
									"    pm.expect(pm.response.text().length).to.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an empty object\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.eql({});\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ids\": [\r\n        \"01u9MdrytZwPidRT0uoCZZ\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/albums",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "98. Get New Releases -- invalid limit, valid country/offset Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain 'error'\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body length is 0\", function () {\r",
									"    pm.expect(pm.response.text().length).to.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an empty object\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.eql({});\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "scope",
								"value": "user-library-read",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/new-releases?limit={2)&offset=2&country=RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"new-releases"
							],
							"query": [
								{
									"key": "limit",
									"value": "{2)"
								},
								{
									"key": "offset",
									"value": "2"
								},
								{
									"key": "country",
									"value": "RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "99. Get Several Categories-- invalid id , valid locale /country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Categories Exist\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"categories\");\r",
									"});\r",
									"\r",
									"pm.test(\"Categories Object Has 'items' Property\", function () {\r",
									"    pm.expect(pm.response.json().categories).to.have.property(\"items\");\r",
									"});\r",
									"\r",
									"pm.test(\"At Least 5 Items in 'items' Array\", function () {\r",
									"    pm.expect(pm.response.json().categories.items).to.be.an('array').that.has.lengthOf.at.least(5);\r",
									"});\r",
									"\r",
									"pm.test(\"First Category Has 'id' and 'name' Properties\", function () {\r",
									"    const firstCategory = pm.response.json().categories.items[0];\r",
									"    pm.expect(firstCategory).to.have.property(\"id\");\r",
									"    pm.expect(firstCategory).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"Icons Exist for All Categories\", function () {\r",
									"    const categories = pm.response.json().categories.items;\r",
									"    categories.forEach((category) => {\r",
									"        pm.expect(category).to.have.property(\"icons\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Categories Have Valid URLs for Icons\", function () {\r",
									"    const categories = pm.response.json().categories.items;\r",
									"    categories.forEach((category) => {\r",
									"        pm.expect(category.icons[0]).to.have.property(\"url\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"All Categories Have 'id' and 'name'\", function () {\r",
									"    const categories = pm.response.json().categories.items;\r",
									"    categories.forEach((category) => {\r",
									"        pm.expect(category).to.have.property(\"id\");\r",
									"        pm.expect(category).to.have.property(\"name\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Check If 'limit' is 20\", function () {\r",
									"    pm.expect(pm.response.json().categories).to.have.property(\"limit\", 20);\r",
									"});\r",
									"\r",
									"pm.test(\"Next Page URL Exists\", function () {\r",
									"    pm.expect(pm.response.json().categories).to.have.property(\"next\");\r",
									"});\r",
									"\r",
									"pm.test(\"Offset is 0\", function () {\r",
									"    pm.expect(pm.response.json().categories).to.have.property(\"offset\", 0);\r",
									"});\r",
									"\r",
									"pm.test(\"Total Categories is a Number\", function () {\r",
									"    pm.expect(pm.response.json().categories).to.have.property(\"total\").that.is.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"First Category Has 'name' of 'Top liste'\", function () {\r",
									"    const firstCategory = pm.response.json().categories.items[0];\r",
									"    pm.expect(firstCategory.name).to.equal(\"Top liste\");\r",
									"});\r",
									"\r",
									"pm.test(\"Category with ID '0JQ5DAqbMKFAUsdyVjCQuL' Exists\", function () {\r",
									"    const categories = pm.response.json().categories.items;\r",
									"    const categoryExists = categories.some(category => category.id === \"0JQ5DAqbMKFAUsdyVjCQuL\");\r",
									"    pm.expect(categoryExists).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Category with ID '0JQ5DAqbMKFF9bY76LXmfI' Exists\", function () {\r",
									"    const categories = pm.response.json().categories.items;\r",
									"    const categoryExists = categories.some(category => category.id === \"0JQ5DAqbMKFF9bY76LXmfI\");\r",
									"    pm.expect(categoryExists).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Last Category Has 'name' of 'Jazz'\", function () {\r",
									"    const lastCategory = pm.response.json().categories.items[pm.response.json().categories.items.length - 1];\r",
									"    pm.expect(lastCategory.name).to.equal(\"Jazz\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/browse/categories/?category_id=bzzzzzzzzzzzzzzzzzz&country=RO&locale=ro_RO",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"browse",
								"categories",
								""
							],
							"query": [
								{
									"key": "category_id",
									"value": "bzzzzzzzzzzzzzzzzzz",
									"description": "\n"
								},
								{
									"key": "country",
									"value": "RO"
								},
								{
									"key": "locale",
									"value": "ro_RO"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "100. Put Save Show for User -- multiple invalid ids shows",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a 200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain 'error'\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body length is 0\", function () {\r",
									"    pm.expect(pm.response.text().length).to.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an empty object\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.eql({});\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BQBxe1mqXhKyaxFnvx3CR1NCUADKTaZXwqRMjcZl7KtmpffqWNLucADeAYFKLHwfShiVd7Laanjs_dIUTsm8ag6gE8EF2GGaLToIi0kyNiu8limBfcqiJUuMRLchK3xowar73QJVXeRRie1tyAHAkoImOLu2mxsI6UmgTkeFU9dEwW79t_yFTqDjRhW8nSFmBDuFhnCPBZKvMnRhlIlUdGUafKj3aQ5wVjpTePxM39NyvqVk92ca0D3po2ncPFa_AETmhYQ2c6bAiszmJ64AhTPJn9YTLLnokoj8u6D5NpNcX0IBUxQgh-pAvK_G-Ns4pOJH3d_sS4otnv6muoUH",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "scope",
								"value": "user-library-modify",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/me/shows?ids=5EqqB52m2bsr4k1Ii7sStc,1nARKz2vTIOb7gC9dusE4b,7EKD1qYk2tkRHY6u6jpmNS",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"shows"
							],
							"query": [
								{
									"key": "ids",
									"value": "5EqqB52m2bsr4k1Ii7sStc,1nARKz2vTIOb7gC9dusE4b,7EKD1qYk2tkRHY6u6jpmNS",
									"description": "maximum 50"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1. Give acces to spotify account",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://accounts.spotify.com/authorize?client_id=0b25140934b94b5b89a262773e468d39&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A8000&scope=ugc-image-upload user-read-playback-state user-modify-playback-state user-read-currently-playing app-remote-control streaming playlist-read-private playlist-read-collaborative playlist-modify-private playlist-modify-public user-follow-modify user-follow-read user-read-playback-position user-top-read user-read-recently-played user-library-modify user-library-read user-read-email user-read-private",
					"protocol": "https",
					"host": [
						"accounts",
						"spotify",
						"com"
					],
					"path": [
						"authorize"
					],
					"query": [
						{
							"key": "client_id",
							"value": "0b25140934b94b5b89a262773e468d39"
						},
						{
							"key": "response_type",
							"value": "code"
						},
						{
							"key": "redirect_uri",
							"value": "http%3A%2F%2Flocalhost%3A8000"
						},
						{
							"key": "scope",
							"value": "ugc-image-upload user-read-playback-state user-modify-playback-state user-read-currently-playing app-remote-control streaming playlist-read-private playlist-read-collaborative playlist-modify-private playlist-modify-public user-follow-modify user-follow-read user-read-playback-position user-top-read user-read-recently-played user-library-modify user-library-read user-read-email user-read-private"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Generate token",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "redirect_uri",
							"value": "http://localhost:8000",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "0b25140934b94b5b89a262773e468d39",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "112512d5947f4ab9b102f50a0df95928",
							"type": "text"
						},
						{
							"key": "code",
							"value": "AQBr_4EtV-c3Fh4c0MII3x6WR1h5T2cM5iwks1sW1RC57g2BVsMiYC-MC0XpDtp92KhxKSQ3HbyMCuObffwPn9UD9Jgf9K2-DaNaC-eVW0GnXjQu1L21Bx6iGbTrnlCBPITogpH4JouCeBMHvOgRAjZC2jEZOQiqAZK8VfIxfAqwnrqwhvT97UGbaXbJytF_anmKKN3FV2AidNJkuHIRpFaq8qXVMEqYfqKkyHWjehN7mlrFr3cDtqx_eCJRqY5whpIR9kw_Ap5LM4bqA7RM_IplHux5ve-gl2jkvgt7Qs6bS4-H6X-C_17RGh2sylNr0frKRZYhUzQPx5q8q-1ahD_3UA7m___5BAtgp7gWvN1skC_xOrA_l_oNVjUrgnPMhtsI2z7rk4GcPvCLKnLS3ZQwXqaezLUniq1Gr0NFg_yUV1OxTQbNWqTB__QO1AcmPV4G5Gt9pw2DPaoZ1mopmHtM6oFA8p4GJZRYXLQhGdWbYpfIQynqzcDEoczO03IbgXQxIE3iH9OlO_tEWdBWXbA6oDoOOjSyGShLRv92WHdyU40p-TYRwM_VDJ7QB1AFhXnmJXQ6FoPrmPVSFj_xpgoPbVtcRqKDrxTvO7Kto29nvT7JLQpZWNDhEhHa4Gd2Tt8hIPgBqqvwevJ1iYp-9Dgj1fS3jKPzhqNdx3wUdWddw7SipVipBuR2oQI7ua9qHgwMVexUGd79FHk",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://accounts.spotify.com/api/token",
					"protocol": "https",
					"host": [
						"accounts",
						"spotify",
						"com"
					],
					"path": [
						"api",
						"token"
					]
				}
			},
			"response": []
		}
	]
}